Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from functools import wraps\r\nfrom flask import Flask, flash, redirect, render_template, redirect, request, session, url_for\r\nfrom werkzeug.security import check_password_hash, generate_password_hash\r\nfrom werkzeug.utils import secure_filename\r\nimport os\r\nimport psycopg2\r\nfrom dotenv import load_dotenv\r\nfrom datetime import datetime\r\nfrom flask import render_template\r\nfrom flask_login import current_user, login_required\r\n\r\n\r\n# Load environment variables\r\nload_dotenv()\r\n\r\n# Create Flask app\r\napp = Flask(__name__)\r\n#app.secret_key = os.getenv('FLASK_SECRET_KEY')\r\napp.secret_key = os.environ.get('FLASK_SECRET_KEY', 'fallback-secret-key-for-development')\r\n\r\n\r\n# Configure upload folder in your app\r\nUPLOAD_FOLDER = os.path.join('static', 'uploads')\r\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\r\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\r\n\r\nif not app.secret_key:\r\n    raise ValueError(\"No secret key set for Flask application\")\r\n\r\n# Database connection\r\ndef get_db_connection():\r\n    conn = psycopg2.connect(\r\n        host=os.getenv('DB_HOST'),\r\n        database=os.getenv('DB_NAME'),\r\n        user=os.getenv('DB_USER'),\r\n        password=os.getenv('DB_PASSWORD'),\r\n        port=os.getenv('DB_PORT'),\r\n        sslmode='require'\r\n    )\r\n    return conn\r\n\r\ndef initialize_database():\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    \r\n    # Create users table\r\n    cur.execute('''\r\n    CREATE TABLE IF NOT EXISTS users (\r\n        id SERIAL PRIMARY KEY,\r\n        username VARCHAR(255) UNIQUE NOT NULL,\r\n        password TEXT NOT NULL,\r\n        role VARCHAR(50) NOT NULL\r\n    )\r\n    ''')\r\n    \r\n    # Create tutorial_categories table\r\n    cur.execute('''\r\n    CREATE TABLE IF NOT EXISTS tutorial_categories (\r\n        id SERIAL PRIMARY KEY,\r\n        name VARCHAR(255) NOT NULL\r\n    )\r\n    ''')\r\n\r\n      # Add these new tables for assignment system\r\n    cur.execute('''\r\n    CREATE TABLE IF NOT EXISTS assignments (\r\n        id SERIAL PRIMARY KEY,\r\n        title VARCHAR(255) NOT NULL,\r\n        description TEXT,\r\n        subject VARCHAR(100) NOT NULL,\r\n        total_marks INTEGER NOT NULL,\r\n        deadline TIMESTAMP,\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n    )\r\n    ''')\r\n\r\n    # Add this new table for assignment-user relationships\r\n    cur.execute('''\r\n        CREATE TABLE IF NOT EXISTS assignment_users (\r\n            assignment_id INTEGER NOT NULL REFERENCES assignments(id) ON DELETE CASCADE,\r\n            user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,\r\n            PRIMARY KEY (assignment_id, user_id)\r\n        )\r\n    ''')\r\n\r\n    cur.execute('''\r\n    CREATE TABLE IF NOT EXISTS assignment_submissions (\r\n        id SERIAL PRIMARY KEY,\r\n        assignment_id INTEGER REFERENCES assignments(id) ON DELETE CASCADE,\r\n        student_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\r\n        submission_text TEXT,\r\n        file_path VARCHAR(255),\r\n        submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        marks_obtained INTEGER,\r\n        feedback TEXT,\r\n        CONSTRAINT unique_submission UNIQUE (assignment_id, student_id)\r\n    )\r\n    ''')\r\n    \r\n    # Create tutorial_videos table\r\n    cur.execute('''\r\n    CREATE TABLE IF NOT EXISTS tutorial_videos (\r\n        id SERIAL PRIMARY KEY,\r\n        title VARCHAR(255) NOT NULL,\r\n        url TEXT NOT NULL,\r\n        category_id INTEGER NOT NULL REFERENCES tutorial_categories(id) ON DELETE CASCADE\r\n    )\r\n    ''')\r\n\r\n    # Create tutorial_sessions table\r\n    cur.execute('''\r\n    CREATE TABLE IF NOT EXISTS tutorial_sessions (\r\n        id SERIAL PRIMARY KEY,\r\n        title VARCHAR(255) NOT NULL,\r\n        description TEXT,\r\n        start_time TIMESTAMP NOT NULL,\r\n        end_time TIMESTAMP NOT NULL,\r\n        max_students INTEGER NOT NULL\r\n    )\r\n    ''')\r\n\r\n    # Create student_bookings table\r\n    # In your initialize_database() function\r\n    cur.execute('''\r\n    CREATE TABLE IF NOT EXISTS student_bookings (\r\n        id SERIAL PRIMARY KEY,\r\n        student_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,\r\n        session_id INTEGER NOT NULL REFERENCES tutorial_sessions(id) ON DELETE CASCADE,\r\n        booking_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n        status VARCHAR(50) DEFAULT 'confirmed',\r\n        CONSTRAINT unique_booking UNIQUE (student_id, session_id)\r\n    )\r\n    ''')\r\n\r\n    conn.commit()\r\n\r\n    # Check if there are any users\r\n    cur.execute('SELECT COUNT(*) FROM users')\r\n    user_count = cur.fetchone()[0]\r\n\r\n    if user_count == 0:\r\n        # Insert default admin user\r\n        default_admin_username = 'admin'\r\n        default_admin_password = generate_password_hash('admin123')\r\n        cur.execute('''\r\n            INSERT INTO users (username, password, role)\r\n            VALUES (%s, %s, %s)\r\n        ''', (default_admin_username, default_admin_password, 'admin'))\r\n        conn.commit()\r\n        print(\"✅ Default admin user created: admin / admin123\")\r\n\r\n    cur.close()\r\n    conn.close()\r\n\r\n\r\n\r\n# Helpers\r\n# Add this helper function to get user by ID\r\ndef get_user_by_id(user_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('SELECT id, username FROM users WHERE id = %s', (user_id,))\r\n    user = cur.fetchone()\r\n    cur.close()\r\n    conn.close()\r\n    if user:\r\n        return {'id': user[0], 'username': user[1]}\r\n\r\ndef get_submission_for_grading(assignment_id, student_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    try:\r\n        # Get submission details\r\n        cur.execute('''\r\n            SELECT s.id, s.submission_text, s.file_path, s.submitted_at, \r\n                   s.marks_obtained, s.feedback, u.username\r\n            FROM assignment_submissions s\r\n            JOIN users u ON s.student_id = u.id\r\n            WHERE s.assignment_id = %s AND s.student_id = %s\r\n        ''', (assignment_id, student_id))\r\n        submission = cur.fetchone()\r\n        \r\n        if not submission:\r\n            return None\r\n            \r\n        # Get assignment details\r\n        cur.execute('SELECT id, title, total_marks FROM assignments WHERE id = %s', (assignment_id,))\r\n        assignment = cur.fetchone()\r\n        \r\n        return {\r\n            'submission': {\r\n                'id': submission[0],\r\n                'submission_text': submission[1],\r\n                'file_path': submission[2],\r\n                'submitted_at': submission[3],\r\n                'marks_obtained': submission[4],\r\n                'feedback': submission[5],\r\n                'username': submission[6]\r\n            },\r\n            'assignment': {\r\n                'id': assignment[0],\r\n                'title': assignment[1],\r\n                'total_marks': assignment[2]\r\n            }\r\n        }\r\n    finally:\r\n        cur.close()\r\n        conn.close()\r\n\r\ndef update_submission_grade(assignment_id, student_id, marks_obtained, feedback):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    try:\r\n        cur.execute('''\r\n            UPDATE assignment_submissions\r\n            SET marks_obtained = %s, feedback = %s\r\n            WHERE assignment_id = %s AND student_id = %s\r\n        ''', (marks_obtained, feedback, assignment_id, student_id))\r\n        conn.commit()\r\n        return True\r\n    except Exception as e:\r\n        conn.rollback()\r\n        app.logger.error(f\"Error updating grade: {str(e)}\")\r\n        return False\r\n    finally:\r\n        cur.close()\r\n        conn.close()\r\n\r\ndef get_all_assignments():\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('SELECT * FROM assignments ORDER BY deadline')\r\n    assignments = cur.fetchall()\r\n    cur.close()\r\n    conn.close()\r\n    return assignments\r\n\r\n\r\ndef get_assignments_for_user(user_id):\r\n    \"\"\"Get assignments assigned to a specific user\"\"\"\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    try:\r\n        cur.execute('''\r\n            SELECT a.id, a.title, a.subject, a.deadline, a.total_marks, a.description\r\n            FROM assignments a\r\n            JOIN assignment_users au ON a.id = au.assignment_id\r\n            WHERE au.user_id = %s\r\n            ORDER BY a.deadline\r\n        ''', (user_id,))\r\n        \r\n        assignments = []\r\n        for row in cur.fetchall():\r\n            assignments.append({\r\n                'id': row[0],\r\n                'title': row[1],\r\n                'subject': row[2],\r\n                'deadline': row[3],\r\n                'total_marks': row[4],\r\n                'description': row[5],\r\n                'status': 'active' if row[3] > datetime.utcnow() else 'expired'\r\n            })\r\n            \r\n        return assignments\r\n    except Exception as e:\r\n        app.logger.error(f\"Error getting assignments for user {user_id}: {str(e)}\")\r\n        return []\r\n    finally:\r\n        cur.close()\r\n        conn.close()\r\n\r\ndef add_assignment(title, description, subject, total_marks, deadline, assigned_users):\r\n    \"\"\"Create a new assignment and assign it to specific users\"\"\"\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    try:\r\n        # Create the assignment\r\n        cur.execute('''\r\n            INSERT INTO assignments \r\n            (title, description, subject, total_marks, deadline)\r\n            VALUES (%s, %s, %s, %s, %s)\r\n            RETURNING id\r\n        ''', (title, description, subject, total_marks, deadline))\r\n        assignment_id = cur.fetchone()[0]\r\n        \r\n        # Assign to selected users\r\n        for user_id in assigned_users:\r\n            cur.execute('''\r\n                INSERT INTO assignment_users (assignment_id, user_id)\r\n                VALUES (%s, %s)\r\n            ''', (assignment_id, user_id))\r\n        \r\n        conn.commit()\r\n        return assignment_id\r\n    except Exception as e:\r\n        conn.rollback()\r\n        raise e\r\n    finally:\r\n        cur.close()\r\n        conn.close()\r\n\r\n\r\ndef get_assignment_details(assignment_id):\r\n    \"\"\"Get full details for a specific assignment\"\"\"\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    try:\r\n        cur.execute('''\r\n            SELECT id, title, description, subject,\r\n                   total_marks, deadline, created_at\r\n            FROM assignments\r\n            WHERE id = %s\r\n        ''', (assignment_id,))\r\n        assignment = cur.fetchone()\r\n        return assignment\r\n    finally:\r\n        cur.close()\r\n        conn.close()\r\n\r\ndef get_student_submission(student_id, assignment_id):\r\n    \"\"\"Get a student's submission for an assignment\"\"\"\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    try:\r\n        cur.execute('''\r\n            SELECT id, submission_text, file_path, submitted_at, \r\n                   marks_obtained, feedback\r\n            FROM assignment_submissions\r\n            WHERE student_id = %s AND assignment_id = %s\r\n        ''', (student_id, assignment_id))\r\n        submission = cur.fetchone()\r\n        return submission\r\n    finally:\r\n        cur.close()\r\n        conn.close()\r\n\r\ndef get_student_submissions(student_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('''\r\n        SELECT a.title, a.subject, a.deadline, s.submitted_at, \r\n               s.marks_obtained, a.total_marks, s.feedback, s.file_path\r\n        FROM assignment_submissions s\r\n        JOIN assignments a ON s.assignment_id = a.id\r\n        WHERE s.student_id = %s\r\n        ORDER BY a.deadline DESC\r\n    ''', (student_id,))\r\n    \r\n    # Convert tuples to dictionaries with meaningful keys\r\n    submissions = []\r\n    for row in cur.fetchall():\r\n        submissions.append({\r\n            'title': row[0],\r\n            'subject': row[1],\r\n            'deadline': row[2],\r\n            'submitted_at': row[3],\r\n            'marks_obtained': row[4],\r\n            'total_marks': row[5],\r\n            'feedback': row[6],\r\n            'file_path': row[7]\r\n        })\r\n    \r\n    cur.close()\r\n    conn.close()\r\n    return submissions\r\n\r\ndef submit_assignment(assignment_id, student_id, submission_text, file_path=None):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    try:\r\n        cur.execute('''\r\n            INSERT INTO assignment_submissions \r\n            (assignment_id, student_id, submission_text, file_path)\r\n            VALUES (%s, %s, %s, %s)\r\n            ON CONFLICT (assignment_id, student_id) \r\n            DO UPDATE SET submission_text = EXCLUDED.submission_text,\r\n                          file_path = EXCLUDED.file_path,\r\n                          submitted_at = CURRENT_TIMESTAMP\r\n        ''', (assignment_id, student_id, submission_text, file_path))\r\n        conn.commit()\r\n        return True\r\n    except Exception as e:\r\n        conn.rollback()\r\n        print(f\"Error submitting assignment: {e}\")\r\n        return False\r\n    finally:\r\n        cur.close()\r\n        conn.close()\r\n\r\ndef get_user_by_username(username):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('SELECT id, username, password, role FROM users WHERE username = %s', (username,))\r\n    user = cur.fetchone()\r\n    cur.close()\r\n    conn.close()\r\n    if user:\r\n        return {\r\n            'id': user[0],\r\n            'username': user[1],\r\n            'password': user[2],\r\n            'role': user[3]\r\n        }\r\n    return None\r\n\r\ndef get_student_bookings(student_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('''\r\n        SELECT sb.id, ts.title, ts.start_time, ts.end_time\r\n        FROM student_bookings sb\r\n        JOIN tutorial_sessions ts ON sb.session_id = ts.id\r\n        WHERE sb.student_id = %s AND ts.start_time > NOW()\r\n        ORDER BY ts.start_time\r\n    ''', (student_id,))\r\n    bookings = cur.fetchall()\r\n    cur.close()\r\n    conn.close()\r\n    return bookings\r\n\r\ndef get_all_categories():\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('SELECT id, name FROM tutorial_categories')\r\n    categories = cur.fetchall()\r\n    cur.close()\r\n    conn.close()\r\n    return categories\r\n\r\ndef get_category_name(category_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('SELECT name FROM tutorial_categories WHERE id = %s', (category_id,))\r\n    category = cur.fetchone()\r\n    cur.close()\r\n    conn.close()\r\n    return category[0] if category else \"Unknown Category\"\r\n\r\ndef get_videos_by_category(category_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('SELECT id, title, url FROM tutorial_videos WHERE category_id = %s', (category_id,))\r\n    rows = cur.fetchall()\r\n    cur.close()\r\n    conn.close()\r\n\r\n    # Convert to list of dictionaries\r\n    videos = [\r\n        {'id': row[0], 'title': row[1], 'url': row[2]}\r\n        for row in rows\r\n    ]\r\n    return videos\r\n\r\ndef get_students():\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('SELECT id, username FROM users WHERE role = %s', ('student',))\r\n    students = cur.fetchall()\r\n    cur.close()\r\n    conn.close()\r\n    return students\r\n\r\ndef add_student_to_db(username, password):  # Changed from add_student\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('INSERT INTO users (username, password, role) VALUES (%s, %s, %s)',\r\n                (username, generate_password_hash(password), 'student'))\r\n    conn.commit()\r\n    cur.close()\r\n    conn.close()\r\n\r\ndef delete_student_by_id(student_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('DELETE FROM users WHERE id = %s AND role = %s', (student_id, 'student'))\r\n    conn.commit()\r\n    cur.close()\r\n    conn.close()\r\n\r\ndef get_all_sessions():\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('''\r\n        SELECT ts.id, ts.title, ts.description, ts.start_time, ts.end_time, ts.max_students,\r\n            COUNT(sb.id) as booked_count\r\n        FROM tutorial_sessions ts\r\n        LEFT JOIN student_bookings sb ON ts.id = sb.session_id\r\n        GROUP BY ts.id\r\n        ORDER BY ts.start_time\r\n    ''')\r\n    sessions = cur.fetchall()\r\n    cur.close()\r\n    conn.close()\r\n    return sessions\r\n\r\ndef get_upcoming_sessions():\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('''\r\n        SELECT ts.id, ts.title, ts.start_time, ts.end_time,\r\n               COUNT(sb.id) as booked_count, ts.max_students\r\n        FROM tutorial_sessions ts\r\n        LEFT JOIN student_bookings sb ON ts.id = sb.session_id\r\n        WHERE ts.start_time > NOW()\r\n        GROUP BY ts.id\r\n        ORDER BY ts.start_time\r\n        LIMIT 5\r\n    ''')\r\n    sessions = cur.fetchall()\r\n    cur.close()\r\n    conn.close()\r\n    return sessions\r\n\r\ndef get_student_bookings(student_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('''\r\n        SELECT sb.id, ts.title, ts.start_time, ts.end_time\r\n        FROM student_bookings sb\r\n        JOIN tutorial_sessions ts ON sb.session_id = ts.id\r\n        WHERE sb.student_id = %s AND ts.start_time > NOW()\r\n        ORDER BY ts.start_time\r\n    ''', (student_id,))\r\n    bookings = cur.fetchall()\r\n    cur.close()\r\n    conn.close()\r\n    return bookings\r\n\r\ndef create_session(title, description, start_time, end_time, max_students):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('''\r\n        INSERT INTO tutorial_sessions (title, description, start_time, end_time, max_students)\r\n        VALUES (%s, %s, %s, %s, %s)\r\n        RETURNING id\r\n    ''', (title, description, start_time, end_time, max_students))\r\n    session_id = cur.fetchone()[0]\r\n    conn.commit()\r\n    cur.close()\r\n    conn.close()\r\n    return session_id\r\n\r\ndef book_session(student_id, session_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    \r\n    # Check if session exists and has available spots\r\n    cur.execute('''\r\n        SELECT COUNT(sb.id), ts.max_students\r\n        FROM tutorial_sessions ts\r\n        LEFT JOIN student_bookings sb ON ts.id = sb.session_id\r\n        WHERE ts.id = %s\r\n        GROUP BY ts.id\r\n    ''', (session_id,))\r\n    result = cur.fetchone()\r\n    \r\n    if not result or result[0] >= result[1]:\r\n        cur.close()\r\n        conn.close()\r\n        return False\r\n    \r\n    # Check if student already booked this session\r\n    cur.execute('''\r\n        SELECT id FROM student_bookings \r\n        WHERE student_id = %s AND session_id = %s\r\n    ''', (student_id, session_id))\r\n    if cur.fetchone():\r\n        cur.close()\r\n        conn.close()\r\n        return False\r\n    \r\n    # Create booking\r\n    cur.execute('''\r\n        INSERT INTO student_bookings (student_id, session_id)\r\n        VALUES (%s, %s)\r\n    ''', (student_id, session_id))\r\n    conn.commit()\r\n    cur.close()\r\n    conn.close()\r\n    return True\r\n\r\ndef cancel_booking(booking_id, student_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('''\r\n        DELETE FROM student_bookings\r\n        WHERE id = %s AND student_id = %s\r\n    ''', (booking_id, student_id))\r\n    affected_rows = cur.rowcount\r\n    conn.commit()\r\n    cur.close()\r\n    conn.close()\r\n    return affected_rows > 0\r\n    \r\n\r\n@app.context_processor\r\ndef inject_categories():\r\n    if 'username' in session:\r\n        return {'categories': get_all_categories()}\r\n    return {}\r\n\r\n@app.route('/video-conference')\r\ndef video_conference():\r\n    return render_template('live_session.html')  # We'll create this file next\r\n\r\n# Decorators\r\ndef login_required(f):\r\n    @wraps(f)\r\n    def decorated_function(*args, **kwargs):\r\n        if 'username' not in session:\r\n            flash('Please log in to access this page.', 'warning')\r\n            return redirect(url_for('login', next=request.url))\r\n        return f(*args, **kwargs)\r\n    return decorated_function\r\n\r\ndef admin_required(f):\r\n    @wraps(f)\r\n    def decorated_function(*args, **kwargs):\r\n        if 'role' not in session or session['role'] != 'admin':\r\n            return render_template('errors/403.html'), 403\r\n        return f(*args, **kwargs)\r\n    return decorated_function\r\n\r\n# Student session booking routes\r\n@app.route('/sessions/book/<int:session_id>', methods=['POST'])\r\n@login_required\r\ndef book_session_route(session_id):\r\n    if session.get('role') != 'student':\r\n        flash('Only students can book sessions', 'danger')\r\n        return redirect(url_for('view_sessions'))\r\n    \r\n    student_id = session.get('user_id')\r\n    if not student_id:\r\n        flash('User not properly authenticated', 'danger')\r\n        return redirect(url_for('view_sessions'))\r\n    \r\n    if book_session(student_id, session_id):\r\n        flash('Session booked successfully!', 'success')\r\n    else:\r\n        flash('Could not book session. It might be full or you already booked it.', 'danger')\r\n    return redirect(url_for('view_sessions'))\r\n\r\n@app.route('/sessions/cancel/<int:booking_id>', methods=['POST'])\r\n@login_required\r\ndef cancel_booking_route(booking_id):\r\n    if cancel_booking(booking_id, session.get('user_id')):\r\n        flash('Booking cancelled successfully', 'success')\r\n    else:\r\n        flash('Could not cancel booking', 'danger')\r\n    return redirect(url_for('view_sessions'))\r\n\r\n# Admin session management routes\r\n@app.route('/sessions')\r\n@login_required\r\ndef view_sessions():\r\n    student_id = session.get('user_id')\r\n    if not student_id:\r\n        flash('User not properly authenticated', 'danger')\r\n        return redirect(url_for('login'))\r\n    \r\n    sessions = get_all_sessions()\r\n    student_bookings = get_student_bookings(student_id)\r\n    return render_template('sessions/list.html', \r\n                         sessions=sessions, \r\n                         bookings=student_bookings)\r\n\r\n# Add this new route to app.py\r\n@app.route('/admin/sessions/bookings/<int:session_id>')\r\n@login_required\r\n@admin_required\r\ndef view_session_bookings(session_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    \r\n    # Get session details\r\n    cur.execute('SELECT title FROM tutorial_sessions WHERE id = %s', (session_id,))\r\n    session_title = cur.fetchone()[0]\r\n    \r\n    # Get users who booked this session\r\n    cur.execute('''\r\n        SELECT u.id, u.username \r\n        FROM student_bookings sb\r\n        JOIN users u ON sb.student_id = u.id\r\n        WHERE sb.session_id = %s\r\n    ''', (session_id,))\r\n    booked_users = cur.fetchall()\r\n    \r\n    cur.close()\r\n    conn.close()\r\n    \r\n    return render_template('admin/session_bookings.html', \r\n                         session_title=session_title,\r\n                         booked_users=booked_users)\r\n\r\n\r\n@app.route('/admin/sessions')\r\n@login_required\r\n@admin_required\r\ndef manage_sessions():\r\n    sessions = get_all_sessions()\r\n    upcoming_sessions = get_upcoming_sessions()\r\n    return render_template('admin/sessions.html', \r\n                         sessions=sessions,\r\n                         upcoming_sessions=upcoming_sessions)\r\n\r\n@app.route('/admin/sessions/add', methods=['GET', 'POST'])\r\n@login_required\r\n@admin_required\r\ndef add_session():\r\n    if request.method == 'POST':\r\n        title = request.form.get('title')\r\n        description = request.form.get('description')\r\n        start_time = request.form.get('start_time')\r\n        end_time = request.form.get('end_time')\r\n        max_students = request.form.get('max_students')\r\n        \r\n        try:\r\n            create_session(title, description, start_time, end_time, int(max_students))\r\n            flash('Session created successfully', 'success')\r\n            return redirect(url_for('manage_sessions'))\r\n        except Exception as e:\r\n            flash(f'Error creating session: {str(e)}', 'danger')\r\n    \r\n    return render_template('admin/add_session.html')\r\n\r\n@app.route('/admin/sessions/delete/<int:session_id>')\r\n@login_required\r\n@admin_required\r\ndef delete_session(session_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('DELETE FROM tutorial_sessions WHERE id = %s', (session_id,))\r\n    conn.commit()\r\n    cur.close()\r\n    conn.close()\r\n    flash('Session deleted successfully', 'success')\r\n    return redirect(url_for('manage_sessions'))\r\n\r\n# Add these helper functions\r\ndef get_all_videos():\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('''\r\n        SELECT tv.id, tv.title, tv.url, tc.name \r\n        FROM tutorial_videos tv\r\n        JOIN tutorial_categories tc ON tv.category_id = tc.id\r\n    ''')\r\n    videos = cur.fetchall()\r\n    cur.close()\r\n    conn.close()\r\n    return videos\r\n\r\ndef add_video(title, url, category_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('INSERT INTO tutorial_videos (title, url, category_id) VALUES (%s, %s, %s)',\r\n                (title, url, category_id))\r\n    conn.commit()\r\n    cur.close()\r\n    conn.close()\r\n\r\ndef delete_video(video_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    cur.execute('DELETE FROM tutorial_videos WHERE id = %s', (video_id,))\r\n    conn.commit()\r\n    cur.close()\r\n    conn.close()\r\n\r\n@app.route('/admin/tutorials')\r\n@login_required\r\n@admin_required\r\ndef manage_tutorials():\r\n    videos = get_all_videos()  # This should return a list of videos\r\n    categories = get_all_categories()  # This should return a list of categories\r\n    \r\n    # Convert to the structure your template expects\r\n    tutorials_dict = {\r\n        category[1]: {  # category name as key\r\n            'videos': [v for v in videos if v[3] == category[1]],  # videos for this category\r\n            'id': category[0]  # category id\r\n        }\r\n        for category in categories\r\n    }\r\n    \r\n    return render_template('admin/tutorials.html', \r\n                         tutorials=tutorials_dict,\r\n                         videos=videos,\r\n                         categories=categories)\r\n\r\n@app.route('/admin/tutorials/add', methods=['GET', 'POST'])\r\n@login_required\r\n@admin_required\r\ndef add_tutorial():\r\n    if request.method == 'POST':\r\n        try:\r\n            title = request.form.get('title', '').strip()\r\n            url = request.form.get('url', '').strip()\r\n            category_id = request.form.get('category_id', '').strip()\r\n            \r\n            if not all([title, url, category_id]):\r\n                flash('All fields are required', 'danger')\r\n                return redirect(url_for('add_tutorial'))\r\n            \r\n            add_video(title, url, category_id)\r\n            flash('Tutorial added successfully', 'success')\r\n            return redirect(url_for('manage_tutorials'))\r\n            \r\n        except Exception as e:\r\n            flash(f'Error adding tutorial: {str(e)}', 'danger')\r\n            return redirect(url_for('add_tutorial'))\r\n    \r\n    # GET request - show the form\r\n    categories = get_all_categories()\r\n    return render_template('admin/add_tutorial.html', categories=categories)\r\n\r\n@app.route('/admin/tutorials/delete/<int:video_id>')\r\n@login_required\r\n@admin_required\r\ndef delete_tutorial(video_id):\r\n    delete_video(video_id)\r\n    flash('Tutorial video deleted successfully', 'success')\r\n    return redirect(url_for('manage_tutorials'))\r\n\r\n# Routes\r\n@app.route('/')\r\ndef home():\r\n    return render_template('home.html')\r\n\r\n#Curriculums\r\n@app.route('/math-curriculum')\r\n@login_required\r\ndef math_curriculum():\r\n    return render_template('math_curriculum.html')\r\n\r\n@app.route('/science_curriculum')\r\n@login_required\r\ndef science_curriculum():\r\n    return render_template('science_curriculum.html')\r\n\r\n@app.route('/english_curriculum')\r\n@login_required\r\ndef english_curriculum():\r\n    return render_template('english_curriculum.html')\r\n\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    if request.method == 'POST':\r\n        username = request.form['username']\r\n        password = request.form['password']\r\n\r\n        user = get_user_by_username(username)\r\n        if user and check_password_hash(user['password'], password):\r\n            session['username'] = username\r\n            session['user_id'] = user['id']\r\n            session['role'] = user['role']\r\n            session['class'] = user.get('class', 'default_class')  # Add this line\r\n            flash('Logged in successfully!', 'success')\r\n            return redirect(request.args.get('next') or url_for('home'))\r\n        else:\r\n            flash('Invalid username or password', 'danger')\r\n\r\n    return render_template('auth/login.html')\r\n\r\n@app.route('/logout')\r\ndef logout():\r\n    session.pop('username', None)\r\n    session.pop('role', None)\r\n    flash('You have been logged out.', 'info')\r\n    return redirect(url_for('home'))\r\n\r\n@app.route('/tutorials')\r\n@login_required\r\ndef tutorials_home():\r\n    categories = get_all_categories()\r\n    # Create a dictionary with category data\r\n    tutorials_dict = {\r\n        category[1]: {  # Using category name as key\r\n            'id': category[0],  # category id\r\n            'videos': get_videos_by_category(category[0])  # videos for this category\r\n        }\r\n        for category in categories\r\n    }\r\n    return render_template('tutorials/index.html', tutorials=tutorials_dict, categories=categories)\r\n\r\n@app.route('/tutorials/<int:category_id>')\r\n@login_required\r\ndef tutorial_language(category_id):\r\n    videos = get_videos_by_category(category_id)\r\n    if not videos:\r\n        flash('Tutorial category not found', 'danger')\r\n        return redirect(url_for('tutorials_home'))\r\n    \r\n    # Get the category name\r\n    category_name = get_category_name(category_id)\r\n    \r\n    return render_template('tutorials/language.html', \r\n                         videos=videos,\r\n                         category={'id': category_id, 'name': category_name})\r\n\r\n# Admin dashboard\r\n@app.route('/admin')\r\n@login_required\r\n@admin_required\r\ndef admin_dashboard():\r\n    students = get_students()\r\n    categories = get_all_categories()\r\n    upcoming_sessions = get_upcoming_sessions()\r\n    return render_template('admin/dashboard.html', \r\n                         student_count=len(students), \r\n                         category_count=len(categories),\r\n                         upcoming_sessions=upcoming_sessions)\r\n\r\n@app.route('/admin/students')\r\n@login_required\r\n@admin_required\r\ndef manage_students():\r\n    students = get_students()\r\n    return render_template('admin/students.html', students=students)\r\n\r\n@app.route('/admin/students/add', methods=['GET', 'POST'])\r\n@login_required\r\n@admin_required\r\ndef add_student():\r\n    if request.method == 'POST':\r\n        username = request.form['username']\r\n        password = request.form['password']\r\n\r\n        existing_user = get_user_by_username(username)\r\n        if existing_user:\r\n            flash('Username already exists', 'danger')\r\n        else:\r\n            add_student_to_db(username, password)\r\n            flash('Student added successfully', 'success')\r\n            return redirect(url_for('manage_students'))\r\n\r\n    return render_template('admin/add_student.html')\r\n\r\n@app.route('/admin/students/delete/<int:student_id>')\r\n@login_required\r\n@admin_required\r\ndef delete_student(student_id):\r\n    delete_student_by_id(student_id)\r\n    flash('Student deleted successfully', 'success')\r\n    return redirect(url_for('manage_students'))\r\n\r\n@app.errorhandler(403)\r\ndef forbidden(e):\r\n    return render_template('errors/403.html'), 403\r\n\r\n# Student assignment routes\r\n@app.route('/assignments')\r\n@login_required\r\ndef view_assignments():\r\n    if session.get('role') != 'student':\r\n        flash('Only students can view assignments', 'danger')\r\n        return redirect(url_for('home'))\r\n    \r\n    assignments = get_assignments_for_user(session['user_id'])\r\n    return render_template('assignments/list.html', \r\n                         assignments=assignments,\r\n                         current_time=datetime.utcnow())\r\n\r\n@app.route('/assignments/<int:assignment_id>', methods=['GET', 'POST'])\r\n@login_required\r\ndef view_assignment(assignment_id):\r\n    if session.get('role') != 'student':\r\n        flash('Only students can view assignments', 'danger')\r\n        return redirect(url_for('home'))\r\n    \r\n    assignment = get_assignment_details(assignment_id)\r\n    if not assignment:\r\n        flash('Assignment not found', 'danger')\r\n        return redirect(url_for('view_assignments'))\r\n    \r\n    submission = get_student_submission(session['user_id'], assignment_id)\r\n    \r\n    if request.method == 'POST':\r\n        submission_text = request.form.get('submission_text', '')\r\n        file_path = None\r\n        \r\n        if 'assignment_file' in request.files:\r\n            file = request.files['assignment_file']\r\n            if file.filename != '':\r\n                filename = secure_filename(file.filename)\r\n                file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\r\n                os.makedirs(os.path.dirname(file_path), exist_ok=True)\r\n                file.save(file_path)\r\n        \r\n        if submit_assignment(assignment_id, session['user_id'], submission_text, file_path):\r\n            flash('Assignment submitted successfully!', 'success')\r\n            return redirect(url_for('view_assignment', assignment_id=assignment_id))\r\n        else:\r\n            flash('Error submitting assignment', 'danger')\r\n    \r\n    return render_template('assignments/view.html',\r\n                         assignment=assignment,\r\n                         submission=submission)\r\n# @login_required\r\n# def view_assignment(assignment_id):\r\n#     if session.get('role') != 'student':\r\n#         flash('Only students can view assignments', 'danger')\r\n#         return redirect(url_for('home'))\r\n    \r\n#     assignment = get_assignment_details(assignment_id)\r\n#     if not assignment:\r\n#         flash('Assignment not found', 'danger')\r\n#         return redirect(url_for('view_assignments'))\r\n    \r\n#     if request.method == 'POST':\r\n#         submission_text = request.form.get('submission_text', '')\r\n#         # Handle file upload if needed\r\n#         file_path = None\r\n#         if 'assignment_file' in request.files:\r\n#             file = request.files['assignment_file']\r\n#             if file.filename != '':\r\n#                 filename = secure_filename(file.filename)\r\n#                 file_path = os.path.join('uploads', filename)\r\n#                 file.save(os.path.join(app.static_folder, file_path))\r\n        \r\n#         if submit_assignment(assignment_id, session['user_id'], submission_text, file_path):\r\n#             flash('Assignment submitted successfully!', 'success')\r\n#         else:\r\n#             flash('Error submitting assignment', 'danger')\r\n#         return redirect(url_for('view_assignment', assignment_id=assignment_id))\r\n    \r\n#     return render_template('assignments/view.html', assignment=assignment)\r\n\r\n@app.route('/assignments/submissions')\r\n@login_required\r\ndef view_submissions():\r\n    if session.get('role') != 'student':\r\n        flash('Only students can view submissions', 'danger')\r\n        return redirect(url_for('home'))\r\n    \r\n    submissions = get_student_submissions(session['user_id'])\r\n    return render_template('assignments/submissions.html', submissions=submissions)\r\n\r\n@app.route('/admin/assignments/add', methods=['GET', 'POST'])\r\n@login_required\r\n@admin_required\r\ndef add_assignment_route():\r\n    if request.method == 'POST':\r\n        try:\r\n            # Get form data\r\n            title = request.form.get('title', '').strip()\r\n            description = request.form.get('description', '').strip()\r\n            subject = request.form.get('subject', '').strip()\r\n            total_marks = request.form.get('total_marks', '').strip()\r\n            deadline_str = request.form.get('deadline', '').strip()\r\n            assigned_users = request.form.getlist('assigned_users')\r\n\r\n            # Validate required fields\r\n            if not all([title, description, subject, total_marks, deadline_str]):\r\n                flash('All fields are required', 'danger')\r\n                return redirect(url_for('add_assignment'))\r\n\r\n            # Convert and validate total marks\r\n            try:\r\n                total_marks = int(total_marks)\r\n                if total_marks <= 0:\r\n                    flash('Total marks must be positive', 'danger')\r\n                    return redirect(url_for('add_assignment'))\r\n            except ValueError:\r\n                flash('Total marks must be a number', 'danger')\r\n                return redirect(url_for('add_assignment'))\r\n\r\n            # Validate deadline\r\n            try:\r\n                deadline = datetime.strptime(deadline_str, '%Y-%m-%dT%H:%M')\r\n                if deadline <= datetime.now():\r\n                    flash('Deadline must be in the future', 'danger')\r\n                    return redirect(url_for('add_assignment'))\r\n            except ValueError:\r\n                flash('Invalid deadline format', 'danger')\r\n                return redirect(url_for('add_assignment'))\r\n\r\n            # Validate student selection\r\n            if not assigned_users:\r\n                flash('Please select at least one student', 'danger')\r\n                return redirect(url_for('add_assignment'))\r\n\r\n            # Verify all student IDs are valid\r\n            valid_student_ids = {str(student[0]) for student in get_students()}  # Get current valid IDs\r\n            print(valid_student_ids)\r\n\r\n            for user_username in assigned_users:\r\n                if user_username not in valid_student_ids:\r\n                    flash('Invalid student selection', 'danger')\r\n                    return redirect(url_for('add_assignment'))\r\n\r\n            # Convert to integers\r\n            assigned_users = [int(user_id) for user_id in assigned_users]\r\n\r\n            # Create assignment\r\n            assignment_id = add_assignment(\r\n                title=title,\r\n                description=description,\r\n                subject=subject,\r\n                total_marks=total_marks,\r\n                deadline=deadline,\r\n                assigned_users=assigned_users\r\n            )\r\n\r\n            flash('Assignment created successfully!', 'success')\r\n            return redirect(url_for('manage_assignments'))\r\n\r\n        except Exception as e:\r\n            flash(f'Error creating assignment: {str(e)}', 'danger')\r\n            app.logger.error(f\"Assignment creation error: {str(e)}\")\r\n    \r\n    # GET request - show form with students\r\n    students = get_students()\r\n    print(students)\r\n    return render_template('admin/assignments/add.html', students=students)\r\n    \r\n\r\n@app.route('/admin/assignments')\r\n@login_required\r\n@admin_required\r\ndef manage_assignments():\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    try:\r\n        cur.execute('''\r\n            SELECT a.id, a.title, a.subject, a.deadline, a.total_marks, a.created_at,\r\n                   COUNT(au.user_id) as assigned_count,\r\n                   COUNT(s.id) as submission_count\r\n            FROM assignments a\r\n            LEFT JOIN assignment_users au ON a.id = au.assignment_id\r\n            LEFT JOIN assignment_submissions s ON a.id = s.assignment_id\r\n            GROUP BY a.id\r\n            ORDER BY a.deadline\r\n        ''')\r\n        \r\n        assignments = []\r\n        for row in cur.fetchall():\r\n            assignments.append({\r\n                'id': row[0],\r\n                'title': row[1],\r\n                'subject': row[2],\r\n                'deadline': row[3],\r\n                'total_marks': row[4],\r\n                'created_at': row[5],\r\n                'assigned_count': row[6],\r\n                'submission_count': row[7]\r\n            })\r\n        \r\n        return render_template('admin/assignments/list.html', assignments=assignments)\r\n    finally:\r\n        cur.close()\r\n        conn.close()\r\n\r\n@app.route('/admin/assignments/<int:assignment_id>/submissions')\r\n@login_required\r\n@admin_required\r\ndef view_assignment_submissions(assignment_id):\r\n    conn = get_db_connection()\r\n    cur = conn.cursor()\r\n    try:\r\n        # Get assignment details\r\n        cur.execute('SELECT id, title, total_marks FROM assignments WHERE id = %s', (assignment_id,))\r\n        assignment = cur.fetchone()\r\n        if not assignment:\r\n            flash('Assignment not found', 'danger')\r\n            return redirect(url_for('manage_assignments'))\r\n        \r\n        # Get submissions with student IDs\r\n        cur.execute('''\r\n            SELECT u.username, s.submitted_at, s.marks_obtained, u.id as student_id, s.feedback\r\n            FROM assignment_submissions s\r\n            JOIN users u ON s.student_id = u.id\r\n            WHERE s.assignment_id = %s\r\n            ORDER BY s.submitted_at DESC\r\n        ''', (assignment_id,))\r\n        submissions = cur.fetchall()\r\n        \r\n        return render_template('admin/assignments/submissions.html',\r\n                            assignment_title=assignment[1],\r\n                            assignment_id=assignment_id,\r\n                            submissions=submissions)\r\n    finally:\r\n        cur.close()\r\n        conn.close()\r\n\r\n@app.route('/dashboard')\r\n@login_required\r\ndef dashboard():\r\n    try:\r\n        # Get the user's class from session or database\r\n        user_class = session.get('class')  # Make sure this is set during login\r\n        \r\n        conn = get_db_connection()\r\n        cur = conn.cursor()\r\n        cur.execute('''\r\n            SELECT id, title, subject, deadline, total_marks\r\n            FROM assignments\r\n            WHERE class = %s\r\n            ORDER BY deadline\r\n        ''', (user_class,))\r\n        assignments = cur.fetchall()\r\n        cur.close()\r\n        conn.close()\r\n        \r\n        return render_template(\r\n            'dashboard.html',\r\n            assignments=assignments,\r\n            current_time=datetime.utcnow()\r\n        )\r\n    except Exception as e:\r\n        app.logger.error(f\"Error fetching assignments: {str(e)}\")\r\n        return render_template('dashboard.html', \r\n                            assignments=[], \r\n                            current_time=datetime.utcnow())\r\n    \r\n# Add these new routes to app.py\r\n\r\n@app.route('/admin/assignments/<int:assignment_id>/submissions/<int:student_id>/grade', methods=['GET', 'POST'])\r\n@login_required\r\n@admin_required\r\ndef grade_submission(assignment_id, student_id):\r\n    # Get student details\r\n    student = get_user_by_id(student_id)\r\n    if not student:\r\n        flash('Student not found', 'danger')\r\n        return redirect(url_for('view_assignment_submissions', assignment_id=assignment_id))\r\n    \r\n    # Get submission and assignment details\r\n    data = get_submission_for_grading(assignment_id, student_id)\r\n    if not data:\r\n        flash('Submission not found', 'danger')\r\n        return redirect(url_for('view_assignment_submissions', assignment_id=assignment_id))\r\n    \r\n    if request.method == 'POST':\r\n        marks_obtained = request.form.get('marks_obtained')\r\n        feedback = request.form.get('feedback', '')\r\n        \r\n        try:\r\n            marks_obtained = float(marks_obtained)\r\n            if marks_obtained < 0 or marks_obtained > data['assignment']['total_marks']:\r\n                flash('Invalid marks value', 'danger')\r\n                return redirect(url_for('grade_submission', assignment_id=assignment_id, student_id=student_id))\r\n            \r\n            if update_submission_grade(assignment_id, student_id, marks_obtained, feedback):\r\n                flash('Grade submitted successfully', 'success')\r\n                return redirect(url_for('view_assignment_submissions', assignment_id=assignment_id))\r\n            else:\r\n                flash('Error submitting grade', 'danger')\r\n        except ValueError:\r\n            flash('Invalid marks format', 'danger')\r\n    \r\n    return render_template('admin/assignments/grade.html',\r\n                         assignment_id=assignment_id,\r\n                         student=student,\r\n                         submission=data['submission'],\r\n                         assignment=data['assignment'])\r\n\r\n@app.route('/admin/assignments/<int:assignment_id>/submissions/<int:student_id>/submit-grade', methods=['POST'])\r\n@login_required\r\n@admin_required\r\ndef submit_grade(assignment_id, student_id):\r\n    marks_obtained = request.form.get('marks_obtained')\r\n    feedback = request.form.get('feedback', '')\r\n    \r\n    try:\r\n        marks_obtained = float(marks_obtained)\r\n        \r\n        # Get assignment to validate max marks\r\n        assignment = get_assignment_details(assignment_id)\r\n        if not assignment:\r\n            flash('Assignment not found', 'danger')\r\n            return redirect(url_for('manage_assignments'))\r\n        \r\n        if marks_obtained < 0 or marks_obtained > assignment[4]:  # total_marks is at index 4\r\n            flash('Invalid marks value', 'danger')\r\n            return redirect(url_for('grade_submission', assignment_id=assignment_id, student_id=student_id))\r\n        \r\n        if update_submission_grade(assignment_id, student_id, marks_obtained, feedback):\r\n            flash('Grade submitted successfully', 'success')\r\n        else:\r\n            flash('Error submitting grade', 'danger')\r\n    except ValueError:\r\n        flash('Invalid marks format', 'danger')\r\n    \r\n    return redirect(url_for('view_assignment_submissions', assignment_id=assignment_id))\r\n\r\n    \r\nif __name__ == '__main__':\r\n    from waitress import serve\r\n    initialize_database()\r\n    serve(app, host=\"0.0.0.0\", port=5000)\r\n\r\n# if __name__ == '__main__':\r\n#     # Enable Flask debug features\r\n#     app.debug = True  # Enables auto-reloader and debugger\r\n    \r\n#     # Initialize database\r\n#     initialize_database()\r\n    \r\n#     # Run the development server\r\n#     app.run(host='0.0.0.0', port=5000)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision 1cab9e7543075d28d013d0617734caf5ff48a8ba)
+++ b/app.py	(date 1747946342821)
@@ -1,14 +1,20 @@
 from functools import wraps
-from flask import Flask, flash, redirect, render_template, redirect, request, session, url_for
+from flask import Flask, flash, redirect, render_template, redirect, request, session, url_for, jsonify
 from werkzeug.security import check_password_hash, generate_password_hash
 from werkzeug.utils import secure_filename
 import os
 import psycopg2
 from dotenv import load_dotenv
-from datetime import datetime
+from datetime import datetime, timedelta
 from flask import render_template
 from flask_login import current_user, login_required
-
+import json
+from flask import Flask, request, jsonify
+import uuid
+from flask_socketio import SocketIO, emit, join_room
+from flask_wtf import FlaskForm
+from wtforms import StringField, SubmitField
+from wtforms.validators import DataRequired
 
 # Load environment variables
 load_dotenv()
@@ -17,6 +23,14 @@
 app = Flask(__name__)
 #app.secret_key = os.getenv('FLASK_SECRET_KEY')
 app.secret_key = os.environ.get('FLASK_SECRET_KEY', 'fallback-secret-key-for-development')
+app.jinja_env.globals.update(float=float)
+
+# Initialize SocketIO
+socketio = SocketIO(app)
+
+class CreateWhiteboardForm(FlaskForm):
+    name = StringField('Whiteboard Name', validators=[DataRequired()])
+    submit = SubmitField('Create Whiteboard')
 
 
 # Configure upload folder in your app
@@ -29,20 +43,80 @@
 
 # Database connection
 def get_db_connection():
-    conn = psycopg2.connect(
-        host=os.getenv('DB_HOST'),
-        database=os.getenv('DB_NAME'),
-        user=os.getenv('DB_USER'),
-        password=os.getenv('DB_PASSWORD'),
-        port=os.getenv('DB_PORT'),
-        sslmode='require'
-    )
-    return conn
+    try:
+        conn = psycopg2.connect(
+            host=os.getenv('host'),
+            database=os.getenv('dbname'),
+            user=os.getenv('user'),
+            password=os.getenv('password'),
+            port=os.getenv('5432'),
+            # sslmode='require'
+        )
+        print("✅ Successfully connected to Database!")
+        return conn
+    except Exception as e:
+        print(f"❌ Connection failed: {e}")
+        raise
+
+# Example usage
+# client = get_db_connection()
+# result = client.table('users').select("*").execute()
 
 def initialize_database():
     conn = get_db_connection()
     cur = conn.cursor()
+
+     # Add this with your other table creations
+    cur.execute('''
+        CREATE TABLE IF NOT EXISTS whiteboards (
+            id UUID PRIMARY KEY,
+            name VARCHAR(255),
+            created_by INTEGER REFERENCES users(id),
+            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
+        )
+    ''')
     
+    cur.execute('''
+        CREATE TABLE IF NOT EXISTS whiteboard_elements (
+            id SERIAL PRIMARY KEY,
+            whiteboard_id UUID REFERENCES whiteboards(id) ON DELETE CASCADE,
+            type VARCHAR(50) NOT NULL,
+            data JSONB NOT NULL,
+            created_by INTEGER REFERENCES users(id),
+            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
+        )
+    ''')
+    
+    cur.execute('''
+        CREATE TABLE IF NOT EXISTS whiteboard_participants (
+            whiteboard_id UUID REFERENCES whiteboards(id) ON DELETE CASCADE,
+            user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
+            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
+            PRIMARY KEY (whiteboard_id, user_id)
+        )
+    ''')
+
+    # Add this after your other table creations
+    cur.execute('''
+        CREATE TABLE IF NOT EXISTS announcements (
+            id SERIAL PRIMARY KEY,
+            title VARCHAR(255) NOT NULL,
+            message TEXT NOT NULL,
+            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
+            created_by INTEGER REFERENCES users(id) ON DELETE SET NULL
+        )
+    ''')
+    
+    cur.execute('''
+        CREATE TABLE IF NOT EXISTS user_announcements (
+            announcement_id INTEGER NOT NULL REFERENCES announcements(id) ON DELETE CASCADE,
+            user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
+            is_read BOOLEAN DEFAULT FALSE,
+            read_at TIMESTAMP,
+            PRIMARY KEY (announcement_id, user_id)
+        )
+    ''')
+    
     # Create users table
     cur.execute('''
     CREATE TABLE IF NOT EXISTS users (
@@ -52,6 +126,53 @@
         role VARCHAR(50) NOT NULL
     )
     ''')
+
+    # Subscription tables
+    cur.execute('''
+        CREATE TABLE IF NOT EXISTS subscription_plans (
+            id SERIAL PRIMARY KEY,
+            name VARCHAR(100) UNIQUE NOT NULL,
+            description TEXT,
+            price DECIMAL(10,2) NOT NULL,
+            duration_days INTEGER NOT NULL
+        )
+    ''')
+
+    cur.execute('''
+            CREATE TABLE IF NOT EXISTS exam_results (
+                id SERIAL PRIMARY KEY,
+                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
+                exam_id INTEGER NOT NULL, -- Storing the JSON exam ID
+                score DECIMAL(5,2) NOT NULL, -- Store score as a percentage or points
+                total_questions INTEGER NOT NULL,
+                completion_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
+            )
+        ''')
+
+    cur.execute('''
+        CREATE TABLE IF NOT EXISTS subscriptions (
+            id SERIAL PRIMARY KEY,
+            user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
+            plan_id INTEGER NOT NULL REFERENCES subscription_plans(id) ON DELETE CASCADE,
+            start_date TIMESTAMP NOT NULL,
+            end_date TIMESTAMP NOT NULL,
+            is_active BOOLEAN DEFAULT FALSE,
+            payment_status VARCHAR(50) DEFAULT 'pending',
+            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
+        )
+    ''')
+
+    cur.execute('''
+        CREATE TABLE IF NOT EXISTS payments (
+            id SERIAL PRIMARY KEY,
+            subscription_id INTEGER NOT NULL REFERENCES subscriptions(id) ON DELETE CASCADE,
+            amount DECIMAL(10,2) NOT NULL,
+            payment_date TIMESTAMP NOT NULL,
+            transaction_id VARCHAR(255),
+            status VARCHAR(50) NOT NULL,
+            receipt_url VARCHAR(255)
+        )
+    ''')
     
     # Create tutorial_categories table
     cur.execute('''
@@ -70,17 +191,9 @@
         subject VARCHAR(100) NOT NULL,
         total_marks INTEGER NOT NULL,
         deadline TIMESTAMP,
-        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
+        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
+        content TEXT -- New column for interactive assignment content
     )
-    ''')
-
-    # Add this new table for assignment-user relationships
-    cur.execute('''
-        CREATE TABLE IF NOT EXISTS assignment_users (
-            assignment_id INTEGER NOT NULL REFERENCES assignments(id) ON DELETE CASCADE,
-            user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
-            PRIMARY KEY (assignment_id, user_id)
-        )
     ''')
 
     cur.execute('''
@@ -93,9 +206,34 @@
         submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
         marks_obtained INTEGER,
         feedback TEXT,
+        interactive_submission_data JSONB, -- New column for interactive submission data
         CONSTRAINT unique_submission UNIQUE (assignment_id, student_id)
     )
     ''')
+
+        # Add this to the initialize_database() function
+    cur.execute('''
+        CREATE TABLE IF NOT EXISTS practice_scores (
+            id SERIAL PRIMARY KEY,
+            student_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
+            subject VARCHAR(50) NOT NULL,
+            topic VARCHAR(100) NOT NULL,
+            score INTEGER NOT NULL,
+            total_questions INTEGER NOT NULL,
+            completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
+            CONSTRAINT unique_practice_attempt UNIQUE (student_id, subject, topic)
+        )
+    ''')
+
+    # Add this new table for assignment-user relationships
+    cur.execute('''
+        CREATE TABLE IF NOT EXISTS assignment_users (
+            assignment_id INTEGER NOT NULL REFERENCES assignments(id) ON DELETE CASCADE,
+            user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
+            PRIMARY KEY (assignment_id, user_id)
+        )
+    ''')
+
     
     # Create tutorial_videos table
     cur.execute('''
@@ -134,6 +272,26 @@
 
     conn.commit()
 
+     # >>> ADDED: Check if subscription plans exist before inserting defaults
+    cur.execute('SELECT COUNT(*) FROM subscription_plans')
+    plan_count = cur.fetchone()[0]
+
+    if plan_count == 0:
+        # Insert default subscription plans if they don't exist
+        cur.execute('''
+            INSERT INTO subscription_plans (name, description, price, duration_days)
+            VALUES
+                ('Access', 'Access to core tutorials and study guides', 99.99, 30),
+                ('Premium', 'All features including priority support', 199.99, 30),
+                ('Standard', 'Access to core tutorials, study guides and Exams', 149.99, 30),
+                
+        ''')
+        conn.commit() # Commit is done once at the end
+        print("✅ Default subscription plans inserted.")
+    else:
+        print("Subscription plans already exist, skipping default insert.")
+    # <<< END ADDED
+
     # Check if there are any users
     cur.execute('SELECT COUNT(*) FROM users')
     user_count = cur.fetchone()[0]
@@ -152,9 +310,560 @@
     cur.close()
     conn.close()
 
+# Helper
+@socketio.on('join_whiteboard')
+def handle_join_whiteboard(data):
+    whiteboard_id = data.get('whiteboard_id')
+    user_id = session.get('user_id')
+    
+    if not whiteboard_id or not user_id:
+        return
+    
+    # Add user to participants if not already there
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        cur.execute('''
+            INSERT INTO whiteboard_participants (whiteboard_id, user_id)
+            VALUES (%s, %s)
+            ON CONFLICT DO NOTHING
+        ''', (whiteboard_id, user_id))
+        conn.commit()
+        
+        # Get username
+        cur.execute('SELECT username FROM users WHERE id = %s', (user_id,))
+        username = cur.fetchone()[0]
+        
+        # Join room
+        join_room(whiteboard_id)
+        
+        # Notify others
+        emit('user_joined', {
+            'user_id': user_id,
+            'username': username,
+            'timestamp': datetime.utcnow().isoformat()
+        }, room=whiteboard_id, include_self=False)
+    except Exception as e:
+        print(f"Error joining whiteboard: {e}")
+    finally:
+        cur.close()
+        conn.close()
+
+@socketio.on('add_element')
+def handle_add_element(data):
+    whiteboard_id = data.get('whiteboard_id')
+    element_type = data.get('type')
+    element_data = data.get('data')
+    user_id = session.get('user_id')
+    
+    if not all([whiteboard_id, element_type, element_data, user_id]):
+        return
+    
+    # Save to database
+    new_element = add_whiteboard_element(whiteboard_id, element_type, element_data, user_id)
+    if new_element:
+        # Broadcast to all in the whiteboard
+        emit('new_element', new_element, room=whiteboard_id)
+
+def create_whiteboard(name, user_id):
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        whiteboard_id = str(uuid.uuid4())
+        cur.execute('''
+            INSERT INTO whiteboards (id, name, created_by)
+            VALUES (%s, %s, %s)
+            RETURNING id
+        ''', (whiteboard_id, name, user_id))
+        
+        # Add creator as participant
+        cur.execute('''
+            INSERT INTO whiteboard_participants (whiteboard_id, user_id)
+            VALUES (%s, %s)
+        ''', (whiteboard_id, user_id))
+        
+        conn.commit()
+        return whiteboard_id
+    except Exception as e:
+        conn.rollback()
+        print(f"Error creating whiteboard: {e}")
+        return None
+    finally:
+        cur.close()
+        conn.close()
+
+def get_whiteboard(whiteboard_id):
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        cur.execute('''
+            SELECT w.id, w.name, u.username as created_by, w.created_at
+            FROM whiteboards w
+            JOIN users u ON w.created_by = u.id
+            WHERE w.id = %s
+        ''', (whiteboard_id,))
+        whiteboard = cur.fetchone()
+        
+        if not whiteboard:
+            return None
+            
+        cur.execute('''
+            SELECT type, data, created_at, u.username as created_by
+            FROM whiteboard_elements e
+            JOIN users u ON e.created_by = u.id
+            WHERE whiteboard_id = %s
+            ORDER BY created_at
+        ''', (whiteboard_id,))
+        elements = cur.fetchall()
+        
+        return {
+            'id': whiteboard[0],
+            'name': whiteboard[1],
+            'created_by': whiteboard[2],
+            'created_at': whiteboard[3],
+            'elements': [{
+                'type': e[0],
+                'data': e[1],
+                'created_at': e[2],
+                'created_by': e[3]
+            } for e in elements]
+        }
+    except Exception as e:
+        print(f"Error getting whiteboard: {e}")
+        return None
+    finally:
+        cur.close()
+        conn.close()
+
+def add_whiteboard_element(whiteboard_id, element_type, element_data, user_id):
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        cur.execute('''
+            INSERT INTO whiteboard_elements (whiteboard_id, type, data, created_by)
+            VALUES (%s, %s, %s, %s)
+            RETURNING id, created_at
+        ''', (whiteboard_id, element_type, json.dumps(element_data), user_id))
+        
+        result = cur.fetchone()
+        conn.commit()
+        
+        # Get username for broadcasting
+        cur.execute('SELECT username FROM users WHERE id = %s', (user_id,))
+        username = cur.fetchone()[0]
+        
+        return {
+            'id': result[0],
+            'type': element_type,
+            'data': element_data,
+            'created_at': result[1],
+            'created_by': username
+        }
+    except Exception as e:
+        conn.rollback()
+        print(f"Error adding whiteboard element: {e}")
+        return None
+    finally:
+        cur.close()
+        conn.close()
+
+def get_unread_announcements_count(user_id):
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        cur.execute('''
+            SELECT COUNT(*) 
+            FROM user_announcements 
+            WHERE user_id = %s AND is_read = FALSE
+        ''', (user_id,))
+        return cur.fetchone()[0]
+    except Exception as e:
+        print(f"Error getting unread announcements count: {e}")
+        return 0
+    finally:
+        cur.close()
+        conn.close()
+
+# Add these helper functions to app.py
+def create_announcement(title, message, created_by, user_ids=None):
+    """Create a new announcement and optionally assign to specific users"""
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        # Create the announcement
+        cur.execute('''
+            INSERT INTO announcements (title, message, created_by)
+            VALUES (%s, %s, %s)
+            RETURNING id
+        ''', (title, message, created_by))
+        announcement_id = cur.fetchone()[0]
+        
+        # If user_ids is None, send to all users
+        if user_ids is None:
+            cur.execute('SELECT id FROM users WHERE role = %s', ('student',))
+            user_ids = [row[0] for row in cur.fetchall()]
+        
+        # Assign to selected users
+        for user_id in user_ids:
+            cur.execute('''
+                INSERT INTO user_announcements (announcement_id, user_id)
+                VALUES (%s, %s)
+            ''', (announcement_id, user_id))
+        
+        conn.commit()
+        return announcement_id
+    except Exception as e:
+        conn.rollback()
+        raise e
+    finally:
+        cur.close()
+        conn.close()
+
+def get_user_announcements(user_id, limit=None):
+    """Get announcements for a specific user"""
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        query = '''
+            SELECT a.id, a.title, a.message, a.created_at, 
+                   u.username as created_by, ua.is_read
+            FROM announcements a
+            JOIN user_announcements ua ON a.id = ua.announcement_id
+            JOIN users u ON a.created_by = u.id
+            WHERE ua.user_id = %s
+            ORDER BY a.created_at DESC
+        '''
+        
+        if limit:
+            query += ' LIMIT %s'
+            cur.execute(query, (user_id, limit))
+        else:
+            cur.execute(query, (user_id,))
+            
+        announcements = []
+        for row in cur.fetchall():
+            announcements.append({
+                'id': row[0],
+                'title': row[1],
+                'message': row[2],
+                'created_at': row[3],
+                'created_by': row[4],
+                'is_read': row[5]
+            })
+            
+        return announcements
+    except Exception as e:
+        print(f"Error getting announcements: {e}")
+        return []
+    finally:
+        cur.close()
+        conn.close()
+
+def mark_announcement_read(announcement_id, user_id):
+    """Mark an announcement as read for a user"""
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        cur.execute('''
+            UPDATE user_announcements
+            SET is_read = TRUE, read_at = CURRENT_TIMESTAMP
+            WHERE announcement_id = %s AND user_id = %s
+        ''', (announcement_id, user_id))
+        conn.commit()
+        return True
+    except Exception as e:
+        conn.rollback()
+        print(f"Error marking announcement as read: {e}")
+        return False
+    finally:
+        cur.close()
+        conn.close()
+
+def get_all_announcements():
+    """Get all announcements for admin view"""
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        cur.execute('''
+            SELECT a.id, a.title, a.message, a.created_at, 
+                   u.username as created_by,
+                   COUNT(ua.user_id) as recipient_count
+            FROM announcements a
+            JOIN users u ON a.created_by = u.id
+            LEFT JOIN user_announcements ua ON a.id = ua.announcement_id
+            GROUP BY a.id, u.username
+            ORDER BY a.created_at DESC
+        ''')
+        
+        announcements = []
+        for row in cur.fetchall():
+            announcements.append({
+                'id': row[0],
+                'title': row[1],
+                'message': row[2],
+                'created_at': row[3],
+                'created_by': row[4],
+                'recipient_count': row[5]
+            })
+            
+        return announcements
+    except Exception as e:
+        print(f"Error getting all announcements: {e}")
+        return []
+    finally:
+        cur.close()
+        conn.close()
+
+def load_exams_from_json(filepath='static/js/exams.json'):
+    """Loads exam data from a JSON file."""
+    try:
+        with open(filepath, 'r') as f:
+            exams_data = json.load(f)
+            return exams_data
+    except FileNotFoundError:
+        print(f"Error: Exam data file not found at {filepath}")
+        return []
+    except json.JSONDecodeError:
+        print(f"Error: Could not decode JSON from {filepath}. Check file format.")
+        return []
+    except Exception as e:
+        print(f"An unexpected error occurred loading exam data: {e}")
+        return []
+
+# Add this new helper function to app.py
+def add_subscription_to_db(user_id, plan_id, start_date, end_date, is_active=False, payment_status='pending'):
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        cur.execute('''
+            INSERT INTO subscriptions
+            (user_id, plan_id, start_date, end_date, is_active, payment_status)
+            VALUES (%s, %s, %s, %s, %s, %s)
+            RETURNING id
+        ''', (user_id, plan_id, start_date, end_date, is_active, payment_status))
+        subscription_id = cur.fetchone()[0]
+        conn.commit()
+        return subscription_id
+    except Exception as e:
+        conn.rollback()
+        print(f"Error adding subscription: {e}")
+        return None
+    finally:
+        cur.close()
+        conn.close()
+
+def get_subscription_plans():
+    conn = get_db_connection()
+    cur = conn.cursor()
+    cur.execute('SELECT * FROM subscription_plans')
+    plans = cur.fetchall()
+    cur.close()
+    conn.close()
+    return plans
+
+def get_user_subscription(user_id):
+    conn = get_db_connection()
+    cur = conn.cursor()
+    cur.execute('''
+        SELECT s.id, p.name, p.price, s.start_date, s.end_date, s.is_active, s.payment_status
+        FROM subscriptions s
+        JOIN subscription_plans p ON s.plan_id = p.id
+        WHERE s.user_id = %s
+        ORDER BY s.end_date DESC
+        LIMIT 1
+    ''', (user_id,))
+    subscription = cur.fetchone()
+    cur.close()
+    conn.close()
+    return subscription
+
+def get_all_subscriptions():
+    conn = get_db_connection()
+    cur = conn.cursor()
+    cur.execute('''
+        SELECT s.id, u.username, p.name, p.price, s.start_date, s.end_date, 
+               s.is_active, s.payment_status, s.created_at
+        FROM subscriptions s
+        JOIN users u ON s.user_id = u.id
+        JOIN subscription_plans p ON s.plan_id = p.id
+        ORDER BY s.end_date DESC
+    ''')
+    subscriptions = cur.fetchall()
+    cur.close()
+    conn.close()
+    return subscriptions
 
-
-# Helpers
+def mark_subscription_as_paid(subscription_id):
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        cur.execute('''
+            UPDATE subscriptions
+            SET payment_status = 'paid', is_active = TRUE
+            WHERE id = %s
+            RETURNING user_id, plan_id
+        ''', (subscription_id,))
+        result = cur.fetchone()
+        
+        if result:
+            user_id, plan_id = result
+            # Update user's role if needed (e.g., give premium access)
+            cur.execute('''
+                UPDATE users
+                SET role = CASE 
+                    WHEN %s = 2 THEN 'premium' 
+                    ELSE role 
+                END
+                WHERE id = %s
+            ''', (plan_id, user_id))
+        
+        conn.commit()
+        return True
+    except Exception as e:
+        conn.rollback()
+        print(f"Error marking subscription as paid: {e}")
+        return False
+    finally:
+        cur.close()
+        conn.close()
+
+def record_practice_score(student_id, subject, topic, score, total_questions):
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        cur.execute('''
+            INSERT INTO practice_scores 
+            (student_id, subject, topic, score, total_questions)
+            VALUES (%s, %s, %s, %s, %s)
+            ON CONFLICT (student_id, subject, topic) 
+            DO UPDATE SET 
+                score = EXCLUDED.score,
+                total_questions = EXCLUDED.total_questions,
+                completed_at = CURRENT_TIMESTAMP
+            WHERE practice_scores.score < EXCLUDED.score
+        ''', (student_id, subject, topic, score, total_questions))
+        conn.commit()
+        return True
+    except Exception as e:
+        conn.rollback()
+        print(f"Error recording practice score: {e}")
+        return False
+    finally:
+        cur.close()
+        conn.close()
+
+def get_leaderboard(subject=None, topic=None, time_period='all', limit=20):
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        # Calculate leaderboard based on (total score / number of attempts)
+        query = '''
+            SELECT 
+                u.id,
+                u.username,
+                ROUND(SUM(ps.score)::numeric / COUNT(ps.id), 2) as avg_score,
+                COUNT(ps.id) as attempt_count,
+                ROUND(AVG(ps.score::numeric / ps.total_questions * 100), 2) as avg_percentage
+            FROM users u
+            JOIN practice_scores ps ON u.id = ps.student_id
+            WHERE u.role = 'student'
+        '''
+        params = []
+        
+        if subject:
+            query += ' AND ps.subject = %s'
+            params.append(subject)
+        if topic:
+            query += ' AND ps.topic = %s'
+            params.append(topic)
+            
+        if time_period == 'week':
+            query += ' AND ps.completed_at >= CURRENT_DATE - INTERVAL \'7 days\''
+        elif time_period == 'month':
+            query += ' AND ps.completed_at >= CURRENT_DATE - INTERVAL \'30 days\''
+            
+        query += '''
+            GROUP BY u.id, u.username
+            HAVING COUNT(ps.id) > 0
+            ORDER BY avg_score DESC, attempt_count DESC
+        '''
+        
+        if limit:
+            query += ' LIMIT %s'
+            params.append(limit)
+        
+        cur.execute(query, params)
+        
+        leaderboard = []
+        rank = 0
+        prev_avg = None
+        actual_rank = 0
+        
+        for row in cur.fetchall():
+            # Handle ties in average score
+            if row[2] != prev_avg:
+                actual_rank = rank + 1
+            prev_avg = row[2]
+            rank += 1
+            
+            leaderboard.append({
+                'user_id': row[0],
+                'username': row[1],
+                'avg_score': row[2],
+                'attempt_count': row[3],
+                'avg_percentage': row[4],
+                'rank': actual_rank
+            })
+        
+        # Get current user's stats if logged in
+        user_stats = None
+        user_rank = None
+        if 'user_id' in session:
+            # Get user's total score divided by attempts
+            cur.execute('''
+                SELECT 
+                    ROUND(SUM(score)::numeric / COUNT(id), 2) as avg_score,
+                    COUNT(*) as attempt_count,
+                    ROUND(AVG(score::numeric / total_questions * 100), 2) as avg_percentage
+                FROM practice_scores
+                WHERE student_id = %s
+            ''', (session['user_id'],))
+            avg_result = cur.fetchone()
+            
+            if avg_result and avg_result[0]:
+                user_stats = {
+                    'avg_score': avg_result[0],
+                    'attempt_count': avg_result[1],
+                    'avg_percentage': avg_result[2]
+                }
+                
+                # Get user's rank based on (total score / attempts)
+                cur.execute('''
+                    WITH ranked_students AS (
+                        SELECT 
+                            student_id,
+                            SUM(score)::numeric / COUNT(id) as avg_score,
+                            DENSE_RANK() OVER (ORDER BY (SUM(score)::numeric / COUNT(id)) DESC) as rank
+                        FROM practice_scores
+                        GROUP BY student_id
+                    )
+                    SELECT rank 
+                    FROM ranked_students
+                    WHERE student_id = %s
+                ''', (session['user_id'],))
+                rank_result = cur.fetchone()
+                if rank_result:
+                    user_rank = rank_result[0]
+        
+        return leaderboard, user_stats, user_rank
+        
+    except Exception as e:
+        print(f"Error getting leaderboard: {e}")
+        return [], None, None
+    finally:
+        cur.close()
+        conn.close()
+
 # Add this helper function to get user by ID
 def get_user_by_id(user_id):
     conn = get_db_connection()
@@ -170,23 +879,31 @@
     conn = get_db_connection()
     cur = conn.cursor()
     try:
-        # Get submission details
+        # Get submission details, including interactive_submission_data
         cur.execute('''
-            SELECT s.id, s.submission_text, s.file_path, s.submitted_at, 
-                   s.marks_obtained, s.feedback, u.username
+            SELECT s.id, s.submission_text, s.file_path, s.submitted_at,
+                   s.marks_obtained, s.feedback, u.username, s.interactive_submission_data
             FROM assignment_submissions s
             JOIN users u ON s.student_id = u.id
             WHERE s.assignment_id = %s AND s.student_id = %s
         ''', (assignment_id, student_id))
         submission = cur.fetchone()
-        
+
         if not submission:
             return None
-            
-        # Get assignment details
-        cur.execute('SELECT id, title, total_marks FROM assignments WHERE id = %s', (assignment_id,))
+
+        # Get assignment details, including content
+        cur.execute('SELECT id, title, total_marks, content FROM assignments WHERE id = %s', (assignment_id,))
         assignment = cur.fetchone()
-        
+
+        # Parse the content if it exists
+        content = None
+        if assignment[3]:  # content is at index 3
+            try:
+                content = json.loads(assignment[3])
+            except (TypeError, json.JSONDecodeError):
+                content = assignment[3]  # fallback to raw content if not JSON
+
         return {
             'submission': {
                 'id': submission[0],
@@ -195,12 +912,14 @@
                 'submitted_at': submission[3],
                 'marks_obtained': submission[4],
                 'feedback': submission[5],
-                'username': submission[6]
+                'username': submission[6],
+                'interactive_submission_data': submission[7]
             },
             'assignment': {
                 'id': assignment[0],
                 'title': assignment[1],
-                'total_marks': assignment[2]
+                'total_marks': assignment[2],
+                'content': content  # Now properly parsed
             }
         }
     finally:
@@ -269,32 +988,29 @@
         cur.close()
         conn.close()
 
-def add_assignment(title, description, subject, total_marks, deadline, assigned_users):
-    """Create a new assignment and assign it to specific users"""
+def add_assignment(title, description, subject, total_marks, deadline, assigned_students_ids, content=None):
     conn = get_db_connection()
     cur = conn.cursor()
     try:
-        # Create the assignment
         cur.execute('''
-            INSERT INTO assignments 
-            (title, description, subject, total_marks, deadline)
-            VALUES (%s, %s, %s, %s, %s)
+            INSERT INTO assignments (title, description, subject, total_marks, deadline, content)
+            VALUES (%s, %s, %s, %s, %s, %s)
             RETURNING id
-        ''', (title, description, subject, total_marks, deadline))
+        ''', (title, description, subject, total_marks, deadline, content)) # Include content here
         assignment_id = cur.fetchone()[0]
-        
-        # Assign to selected users
-        for user_id in assigned_users:
+
+        for student_id in assigned_students_ids:
             cur.execute('''
                 INSERT INTO assignment_users (assignment_id, user_id)
                 VALUES (%s, %s)
-            ''', (assignment_id, user_id))
-        
+            ''', (assignment_id, student_id))
+
         conn.commit()
-        return assignment_id
+        return True
     except Exception as e:
         conn.rollback()
-        raise e
+        print(f"Error adding assignment: {e}")
+        return False
     finally:
         cur.close()
         conn.close()
@@ -307,7 +1023,7 @@
     try:
         cur.execute('''
             SELECT id, title, description, subject,
-                   total_marks, deadline, created_at
+                   total_marks, deadline, created_at, content
             FROM assignments
             WHERE id = %s
         ''', (assignment_id,))
@@ -364,19 +1080,22 @@
     conn.close()
     return submissions
 
-def submit_assignment(assignment_id, student_id, submission_text, file_path=None):
+def submit_assignment(assignment_id, student_id, submission_text, file_path=None, interactive_submission_data=None):
     conn = get_db_connection()
     cur = conn.cursor()
     try:
         cur.execute('''
-            INSERT INTO assignment_submissions 
-            (assignment_id, student_id, submission_text, file_path)
-            VALUES (%s, %s, %s, %s)
-            ON CONFLICT (assignment_id, student_id) 
-            DO UPDATE SET submission_text = EXCLUDED.submission_text,
-                          file_path = EXCLUDED.file_path,
-                          submitted_at = CURRENT_TIMESTAMP
-        ''', (assignment_id, student_id, submission_text, file_path))
+            INSERT INTO assignment_submissions
+            (assignment_id, student_id, submission_text, file_path, interactive_submission_data)
+            VALUES (%s, %s, %s, %s, %s)
+            ON CONFLICT (assignment_id, student_id) DO UPDATE
+            SET submission_text = EXCLUDED.submission_text,
+                file_path = EXCLUDED.file_path,
+                submitted_at = CURRENT_TIMESTAMP,
+                interactive_submission_data = EXCLUDED.interactive_submission_data -- Update interactive data
+            RETURNING id
+        ''', (assignment_id, student_id, submission_text, file_path, interactive_submission_data)) # Include interactive_submission_data here
+        submission_id = cur.fetchone()[0]
         conn.commit()
         return True
     except Exception as e:
@@ -593,11 +1312,6 @@
     return affected_rows > 0
     
 
-@app.context_processor
-def inject_categories():
-    if 'username' in session:
-        return {'categories': get_all_categories()}
-    return {}
 
 @app.route('/video-conference')
 def video_conference():
@@ -825,7 +1539,15 @@
 # Routes
 @app.route('/')
 def home():
-    return render_template('home.html')
+    # Initialize subscription to None
+    subscription = None
+    # Check if user is logged in and 'user_id' is in session
+    if 'user_id' in session:
+        # Call the function and pass the result to the template
+        subscription = get_user_subscription(session['user_id'])
+
+    # Pass the subscription variable to the render_template function
+    return render_template('home.html', subscription=subscription)
 
 #Curriculums
 @app.route('/math-curriculum')
@@ -869,19 +1591,29 @@
     flash('You have been logged out.', 'info')
     return redirect(url_for('home'))
 
+# @app.route('/tutorials')
+# @login_required
+# def tutorials_home():
+#     categories = get_all_categories()
+#     # Create a dictionary with category data
+#     tutorials_dict = {
+#         category[1]: {  # Using category name as key
+#             'id': category[0],  # category id
+#             'videos': get_videos_by_category(category[0])  # videos for this category
+#         }
+#         for category in categories
+#     }
+#     return render_template('tutorials/index.html', tutorials=tutorials_dict, categories=categories)
+
 @app.route('/tutorials')
 @login_required
 def tutorials_home():
-    categories = get_all_categories()
-    # Create a dictionary with category data
-    tutorials_dict = {
-        category[1]: {  # Using category name as key
-            'id': category[0],  # category id
-            'videos': get_videos_by_category(category[0])  # videos for this category
-        }
-        for category in categories
-    }
-    return render_template('tutorials/index.html', tutorials=tutorials_dict, categories=categories)
+    return render_template('tutorials/video_tutorials.html')
+
+@app.route('/study_guides')
+@login_required
+def studyguides_home():
+    return render_template('study_guides.html')
 
 @app.route('/tutorials/<int:category_id>')
 @login_required
@@ -906,10 +1638,20 @@
     students = get_students()
     categories = get_all_categories()
     upcoming_sessions = get_upcoming_sessions()
+    
+    # Get active subscription count
+    conn = get_db_connection()
+    cur = conn.cursor()
+    cur.execute("SELECT COUNT(*) FROM subscriptions WHERE is_active = TRUE")
+    active_subscriptions_count = cur.fetchone()[0]
+    cur.close()
+    conn.close()
+    
     return render_template('admin/dashboard.html', 
                          student_count=len(students), 
                          category_count=len(categories),
-                         upcoming_sessions=upcoming_sessions)
+                         upcoming_sessions=upcoming_sessions,
+                         active_subscriptions_count=active_subscriptions_count)
 
 @app.route('/admin/students')
 @login_required
@@ -1048,49 +1790,47 @@
             subject = request.form.get('subject', '').strip()
             total_marks = request.form.get('total_marks', '').strip()
             deadline_str = request.form.get('deadline', '').strip()
-            assigned_users = request.form.getlist('assigned_users')
+            assign_to = request.form.get('assign_to')  # 'all' or 'selected'
+            selected_users = request.form.getlist('selected_users[]') if assign_to == 'selected' else []
 
             # Validate required fields
             if not all([title, description, subject, total_marks, deadline_str]):
                 flash('All fields are required', 'danger')
-                return redirect(url_for('add_assignment'))
+                return redirect(url_for('add_assignment_route'))
 
             # Convert and validate total marks
             try:
                 total_marks = int(total_marks)
                 if total_marks <= 0:
                     flash('Total marks must be positive', 'danger')
-                    return redirect(url_for('add_assignment'))
+                    return redirect(url_for('add_assignment_route'))
             except ValueError:
                 flash('Total marks must be a number', 'danger')
-                return redirect(url_for('add_assignment'))
+                return redirect(url_for('add_assignment_route'))
 
             # Validate deadline
             try:
                 deadline = datetime.strptime(deadline_str, '%Y-%m-%dT%H:%M')
-                if deadline <= datetime.now():
+                if deadline <= datetime.utcnow():
                     flash('Deadline must be in the future', 'danger')
-                    return redirect(url_for('add_assignment'))
+                    return redirect(url_for('add_assignment_route'))
             except ValueError:
                 flash('Invalid deadline format', 'danger')
-                return redirect(url_for('add_assignment'))
+                return redirect(url_for('add_assignment_route'))
 
-            # Validate student selection
-            if not assigned_users:
+            # Get user IDs based on selection
+            if assign_to == 'all':
+                conn = get_db_connection()
+                cur = conn.cursor()
+                cur.execute('SELECT id FROM users WHERE role = %s', ('student',))
+                user_ids = [row[0] for row in cur.fetchall()]
+                cur.close()
+                conn.close()
+            elif assign_to == 'selected' and selected_users:
+                user_ids = [int(user_id) for user_id in selected_users]
+            else:
                 flash('Please select at least one student', 'danger')
-                return redirect(url_for('add_assignment'))
-
-            # Verify all student IDs are valid
-            valid_student_ids = {str(student[0]) for student in get_students()}  # Get current valid IDs
-            print(valid_student_ids)
-
-            for user_username in assigned_users:
-                if user_username not in valid_student_ids:
-                    flash('Invalid student selection', 'danger')
-                    return redirect(url_for('add_assignment'))
-
-            # Convert to integers
-            assigned_users = [int(user_id) for user_id in assigned_users]
+                return redirect(url_for('add_assignment_route'))
 
             # Create assignment
             assignment_id = add_assignment(
@@ -1099,7 +1839,7 @@
                 subject=subject,
                 total_marks=total_marks,
                 deadline=deadline,
-                assigned_users=assigned_users
+                assigned_students_ids=user_ids
             )
 
             flash('Assignment created successfully!', 'success')
@@ -1111,7 +1851,6 @@
     
     # GET request - show form with students
     students = get_students()
-    print(students)
     return render_template('admin/assignments/add.html', students=students)
     
 
@@ -1214,7 +1953,6 @@
                             current_time=datetime.utcnow())
     
 # Add these new routes to app.py
-
 @app.route('/admin/assignments/<int:assignment_id>/submissions/<int:student_id>/grade', methods=['GET', 'POST'])
 @login_required
 @admin_required
@@ -1284,18 +2022,799 @@
     
     return redirect(url_for('view_assignment_submissions', assignment_id=assignment_id))
 
+#Leaderboard routes
+@app.route('/leaderboard')
+@login_required
+def view_leaderboard():
+    subject = request.args.get('subject')
+    topic = request.args.get('topic')
+    time_period = request.args.get('time', 'all')
     
+    leaderboard, user_stats, user_rank = get_leaderboard(
+        subject=subject, 
+        topic=topic, 
+        time_period=time_period
+    )
+    
+    # Get available subjects and topics
+    conn = get_db_connection()
+    cur = conn.cursor()
+    cur.execute('SELECT DISTINCT subject FROM practice_scores ORDER BY subject')
+    available_subjects = [row[0] for row in cur.fetchall()]
+    
+    available_topics = []
+    if subject:
+        cur.execute('''
+            SELECT DISTINCT topic FROM practice_scores 
+            WHERE subject = %s ORDER BY topic
+        ''', (subject,))
+        available_topics = [row[0] for row in cur.fetchall()]
+    
+    cur.close()
+    conn.close()
+    
+    return render_template('leaderboard.html',
+                         leaderboard=leaderboard,
+                         available_subjects=available_subjects,
+                         available_topics=available_topics,
+                         current_subject=subject,
+                         current_topic=topic,
+                         user_stats=user_stats,
+                         user_rank=user_rank)
+
+@app.route('/api/leaderboard-details')
+@login_required
+def get_leaderboard_details():
+    user_id = request.args.get('user_id')
+    
+    if not user_id:
+        return jsonify({'error': 'Missing user_id parameter'}), 400
+    
+    conn = get_db_connection()
+    cur = conn.cursor()
+    
+    try:
+        # Get basic user info
+        cur.execute('SELECT username FROM users WHERE id = %s', (user_id,))
+        user = cur.fetchone()
+        if not user:
+            return jsonify({'error': 'User not found'}), 404
+        
+        # Get overall stats (total score / attempts)
+        cur.execute('''
+            SELECT 
+                ROUND(SUM(score)::numeric / COUNT(id), 2) as avg_score,
+                COUNT(*) as attempt_count,
+                ROUND(AVG(score::numeric / total_questions * 100), 2) as avg_percentage
+            FROM practice_scores
+            WHERE student_id = %s
+        ''', (user_id,))
+        overall_stats = cur.fetchone()
+        
+        # Get global rank based on (total score / attempts)
+        cur.execute('''
+            WITH ranked_students AS (
+                SELECT 
+                    student_id,
+                    SUM(score)::numeric / COUNT(id) as avg_score,
+                    DENSE_RANK() OVER (ORDER BY (SUM(score)::numeric / COUNT(id)) DESC) as rank
+                FROM practice_scores
+                GROUP BY student_id
+            )
+            SELECT rank 
+            FROM ranked_students
+            WHERE student_id = %s
+        ''', (user_id,))
+        rank_result = cur.fetchone()
+        
+        # Get performance by subject
+        cur.execute('''
+            SELECT 
+                subject,
+                ROUND(SUM(score)::numeric / COUNT(id), 2) as avg_score,
+                COUNT(*) as attempt_count,
+                ROUND(AVG(score::numeric / total_questions * 100), 2) as avg_percentage
+            FROM practice_scores
+            WHERE student_id = %s
+            GROUP BY subject
+            ORDER BY avg_score DESC
+        ''', (user_id,))
+        subjects = []
+        for row in cur.fetchall():
+            subjects.append({
+                'subject': row[0],
+                'avg_score': row[1],
+                'attempt_count': row[2],
+                'avg_percentage': row[3]
+            })
+        
+        # Get history for chart
+        cur.execute('''
+            SELECT 
+                score,
+                total_questions,
+                ROUND((score::numeric / total_questions * 100), 2) as percentage,
+                completed_at,
+                subject,
+                topic
+            FROM practice_scores
+            WHERE student_id = %s
+            ORDER BY completed_at
+        ''', (user_id,))
+        
+        history = []
+        for row in cur.fetchall():
+            history.append({
+                'score': row[0],
+                'total_questions': row[1],
+                'percentage': row[2],
+                'date': row[3].strftime('%Y-%m-%d'),
+                'subject': row[4],
+                'topic': row[5]
+            })
+        
+        return jsonify({
+            'username': user[0],
+            'avg_score': overall_stats[0] if overall_stats else 0,
+            'attempt_count': overall_stats[1] if overall_stats else 0,
+            'avg_percentage': overall_stats[2] if overall_stats else 0,
+            'rank': rank_result[0] if rank_result else None,
+            'subjects': subjects,
+            'history': history
+        })
+        
+    except Exception as e:
+        print(f"Error getting leaderboard details: {e}")
+        return jsonify({'error': 'Internal server error'}), 500
+    finally:
+        cur.close()
+        conn.close()
+
+@app.route('/api/record-practice', methods=['POST'])
+@login_required
+def record_practice():
+    if session.get('role') != 'student':
+        return jsonify({'success': False, 'error': 'Only students can record practice'})
+    
+    data = request.get_json()
+    subject = data.get('subject')
+    topic = data.get('topic')
+    score = data.get('score')
+    total_questions = data.get('total_questions')
+    
+    if not all([subject, topic, score is not None, total_questions]):
+        return jsonify({'success': False, 'error': 'Missing required fields'})
+    
+    try:
+        success = record_practice_score(
+            student_id=session['user_id'],
+            subject=subject,
+            topic=topic,
+            score=score,
+            total_questions=total_questions
+        )
+        return jsonify({'success': success})
+    except Exception as e:
+        return jsonify({'success': False, 'error': str(e)})
+    
+# Subscription routes
+@app.route('/subscribe')
+@login_required
+def subscribe():
+    plans = get_subscription_plans()
+    current_sub = get_user_subscription(session['user_id'])
+    return render_template('subscriptions/subscribe.html', 
+                         plans=plans,
+                         current_sub=current_sub)
+
+@app.route('/subscribe/<int:plan_id>', methods=['POST'])
+@login_required
+def create_subscription(plan_id):
+    conn = get_db_connection()
+    cur = conn.cursor()
+    
+    try:
+        # Get plan details
+        cur.execute('SELECT id, price, duration_days FROM subscription_plans WHERE id = %s', (plan_id,))
+        plan = cur.fetchone()
+        if not plan:
+            flash('Invalid subscription plan', 'danger')
+            return redirect(url_for('subscribe'))
+        
+        # Create subscription (payment will be marked as pending)
+        start_date = datetime.utcnow()
+        end_date = start_date + timedelta(days=plan[2])
+        
+        cur.execute('''
+            INSERT INTO subscriptions 
+            (user_id, plan_id, start_date, end_date, is_active, payment_status)
+            VALUES (%s, %s, %s, %s, %s, %s)
+            RETURNING id
+        ''', (session['user_id'], plan_id, start_date, end_date, False, 'pending'))
+        
+        subscription_id = cur.fetchone()[0]
+        conn.commit()
+        
+        # In a real app, you would integrate with a payment gateway here
+        # For now, we'll just redirect to a confirmation page
+        return redirect(url_for('subscription_confirmation', subscription_id=subscription_id))
+        
+    except Exception as e:
+        conn.rollback()
+        flash('Error creating subscription: ' + str(e), 'danger')
+        return redirect(url_for('subscribe'))
+    finally:
+        cur.close()
+        conn.close()
+
+@app.route('/subscription/confirmation/<int:subscription_id>')
+@login_required
+def subscription_confirmation(subscription_id):
+    return render_template('subscriptions/confirmation.html', subscription_id=subscription_id)
+
+# Admin subscription management
+@app.route('/admin/subscriptions')
+@login_required
+@admin_required
+def manage_subscriptions():
+    subscriptions = get_all_subscriptions()
+    return render_template('admin/subscriptions/list.html', subscriptions=subscriptions)
+
+@app.route('/admin/subscriptions/mark-paid/<int:subscription_id>', methods=['POST'])
+@login_required
+@admin_required
+def mark_subscription_paid(subscription_id):
+    if mark_subscription_as_paid(subscription_id):
+        flash('Subscription marked as paid', 'success')
+    else:
+        flash('Failed to mark subscription as paid', 'danger')
+    return redirect(url_for('manage_subscriptions'))
+
+# Add this new route to app.py
+@app.route('/admin/subscriptions/add', methods=['GET', 'POST'])
+@login_required
+@admin_required
+def admin_add_subscription():
+    if request.method == 'POST':
+        try:
+            student_id = request.form.get('student_id')
+            plan_id = request.form.get('plan_id')
+            start_date_str = request.form.get('start_date')
+            duration_days = request.form.get('duration_days')
+            mark_paid = request.form.get('mark_paid') is not None # Checkbox value
+
+            if not all([student_id, plan_id, start_date_str, duration_days]):
+                flash('All fields are required', 'danger')
+                return redirect(url_for('admin_add_subscription'))
+
+            # Convert data types
+            student_id = int(student_id)
+            plan_id = int(plan_id)
+            duration_days = int(duration_days)
+            start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
+            end_date = start_date + timedelta(days=duration_days)
+
+            # Determine payment status and active status
+            payment_status = 'paid' if mark_paid else 'pending'
+            is_active = mark_paid # Subscription is active immediately if marked as paid
+
+            subscription_id = add_subscription_to_db(
+                user_id=student_id,
+                plan_id=plan_id,
+                start_date=start_date,
+                end_date=end_date,
+                is_active=is_active,
+                payment_status=payment_status
+            )
+
+            if subscription_id:
+                # If marked paid, update user role if necessary (e.g., grant premium access)
+                if is_active:
+                     conn = get_db_connection()
+                     cur = conn.cursor()
+                     try:
+                         cur.execute('SELECT name FROM subscription_plans WHERE id = %s', (plan_id,))
+                         plan_name = cur.fetchone()[0]
+                         if plan_name.lower() == 'premium': # Check plan name for role update
+                             cur.execute("UPDATE users SET role = 'premium' WHERE id = %s", (student_id,))
+                             conn.commit()
+                     except Exception as e:
+                         print(f"Error updating user role: {e}")
+                     finally:
+                         cur.close()
+                         conn.close()
+
+                flash('Subscription added successfully', 'success')
+                return redirect(url_for('manage_subscriptions'))
+            else:
+                flash('Error adding subscription', 'danger')
+
+        except ValueError:
+            flash('Invalid input data', 'danger')
+        except Exception as e:
+            flash(f'An unexpected error occurred: {str(e)}', 'danger')
+            app.logger.error(f"Admin add subscription error: {str(e)}")
+
+
+    # GET request
+    students = get_students()
+    plans = get_subscription_plans()
+    print("DEBUG: Rendering admin/add_subscription.html. Checking if 'float' is in globals:", 'float' in app.jinja_env.globals) # Add this line
+    return render_template('admin/add_subscription.html', students=students, plans=plans)
+
+@app.route('/subscription/status')
+@login_required
+def subscription_status():
+    # Ensure only students can access this page if needed, although login_required already restricts it
+    if session.get('role') != 'student':
+        flash('This page is only for students.', 'warning')
+        return redirect(url_for('home')) # Or wherever appropriate
+
+    user_id = session.get('user_id')
+    if not user_id:
+        # This case should be covered by @login_required, but as a fallback:
+        flash('User not logged in.', 'danger')
+        return redirect(url_for('login'))
+
+    subscription = get_user_subscription(user_id)
+    return render_template('subscription_status.html', subscription=subscription)
+
+@app.route('/exam_practice')
+@login_required # Assuming exam practice requires login
+# @student_required # Optional: if only students should access
+def exam_practice():
+    """Renders the exam practice page with data from exams.json."""
+    exams = load_exams_from_json('static/js/exams.json') # Adjust path if needed
+    print("DEBUG: Loaded exams:", exams)
+    return render_template('exam_practice.html', exams=exams)
+
+@app.route('/exam/<int:exam_id>')
+@login_required # Ensure user is logged in to take exams
+# @student_required # Optional: restrict to students
+def take_exam(exam_id):
+    """Loads a specific exam and renders the exam-taking page."""
+    exams = load_exams_from_json('static/js/exams.json') # Load all exams
+
+    # Find the exam with the matching ID
+    selected_exam = None
+    for exam in exams:
+        if exam.get('id') == exam_id:
+            selected_exam = exam
+            break
+
+    if selected_exam:
+        return render_template('take_exam.html', exam=selected_exam)
+    else:
+        flash('Exam not found.', 'danger')
+        return redirect(url_for('exam_practice')) # Redirect back if exam ID is invalid
+
+@app.route('/submit_exam/<int:exam_id>', methods=['POST'])
+@login_required # Ensure user is logged in
+# @student_required # Optional: restrict to students
+def submit_exam(exam_id):
+    """Handles the submission of an exam, grades it, and saves the result."""
+    user_id = session.get('user_id')
+    if not user_id:
+        flash('User not logged in.', 'danger')
+        return redirect(url_for('login'))
+
+    # Load all exams from the JSON file
+    exams = load_exams_from_json('static/js/exams.json')
+
+    # Find the specific exam the user submitted
+    selected_exam = None
+    for exam in exams:
+        if exam.get('id') == exam_id:
+            selected_exam = exam
+            break
+
+    if not selected_exam:
+        flash('Exam not found.', 'danger')
+        return redirect(url_for('exam_practice')) # Redirect back if exam ID is invalid
+
+    # Get user's submitted answers
+    user_answers = request.form
+
+    # Grade the exam
+    correct_answers_count = 0
+    total_questions = len(selected_exam.get('questions', []))
+
+    if total_questions > 0:
+        for question in selected_exam.get('questions', []):
+            question_id_key = f"question_{question.get('id')}"
+            submitted_answer = user_answers.get(question_id_key)
+            correct_answer = question.get('correct_answer')
+
+            # Compare submitted answer with the correct answer
+            # Ensure comparison handles potential data type differences if necessary
+            if submitted_answer is not None and str(submitted_answer) == str(correct_answer):
+                correct_answers_count += 1
+
+        # Calculate score (as a percentage)
+        score = (correct_answers_count / total_questions) * 100
+    else:
+        score = 0 # Handle exams with no questions
+
+    print(f"User {user_id} submitted Exam {exam_id}. Score: {score:.2f}% ({correct_answers_count}/{total_questions} correct)")
+
+    # Save the result to the database
+    conn = get_db_connection()
+    cur = conn.cursor()
+    result_id = None
+    try:
+        cur.execute('''
+            INSERT INTO exam_results (user_id, exam_id, score, total_questions, completion_time)
+            VALUES (%s, %s, %s, %s, CURRENT_TIMESTAMP)
+            RETURNING id;
+        ''', (user_id, exam_id, score, total_questions))
+        result_id = cur.fetchone()[0]
+        conn.commit()
+        flash('Exam submitted and graded successfully!', 'success')
+
+        # Redirect to a results page
+        return redirect(url_for('exam_results', result_id=result_id))
+
+    except Exception as e:
+        conn.rollback()
+        print(f"Error saving exam result: {e}")
+        flash('Error saving exam result.', 'danger')
+        # Redirect to exam practice page or an error page
+        return redirect(url_for('exam_practice'))
+    finally:
+        cur.close()
+        conn.close()
+
+# *** Placeholder route for displaying exam results ***
+# You will implement the logic for this route and create the template next.
+
+# Placeholder route for displaying exam results
+@app.route('/exam_results/<int:result_id>')
+@login_required
+def exam_results(result_id):
+    """Fetches and displays the results of a completed exam."""
+    user_id = session.get('user_id')
+    if not user_id:
+        flash('User not logged in.', 'danger')
+        return redirect(url_for('login'))
+
+    conn = get_db_connection()
+    cur = conn.cursor()
+    result = None
+    try:
+        # Fetch the specific exam result from the database
+        cur.execute('''
+            SELECT id, user_id, exam_id, score, total_questions, completion_time
+            FROM exam_results
+            WHERE id = %s AND user_id = %s; -- Ensure user can only see their own results
+        ''', (result_id, user_id))
+        result = cur.fetchone()
+
+    except Exception as e:
+        print(f"Error fetching exam result {result_id}: {e}")
+        flash('Error fetching exam results.', 'danger')
+        return redirect(url_for('exam_practice')) # Redirect if fetching fails
+    finally:
+        cur.close()
+        conn.close()
+
+    if not result:
+        flash('Exam result not found or you do not have permission to view it.', 'danger')
+        return redirect(url_for('exam_practice')) # Redirect if result not found
+
+    # Unpack result data
+    result_id, result_user_id, exam_json_id, score, total_questions, completion_time = result
+
+    # Load the exam details from the JSON file using the exam_json_id
+    exams = load_exams_from_json('static/js/exams.json')
+    exam_details = None
+    for exam in exams:
+        if exam.get('id') == exam_json_id:
+            exam_details = exam
+            break
+
+    if not exam_details:
+         # This case means the exam data in the JSON was changed/removed after the user took it
+        flash(f'Exam details for result ID {result_id} not found in JSON file.', 'warning')
+        # We can still show the basic score, but not question-by-question review
+        return render_template('exam_results.html',
+                               result=result, # Pass the basic result data
+                               exam_details=None) # Indicate exam details are missing
+
+
+    # Pass both the result data and exam details to the template
+    return render_template('exam_results.html',
+                           result=result,
+                           exam_details=exam_details)
+
+# Announcement routes
+@app.route('/announcements')
+@login_required
+def view_announcements():
+    announcements = get_user_announcements(session['user_id'])
+    return render_template('announcements/list.html', announcements=announcements)
+
+@app.route('/announcements/<int:announcement_id>')
+@login_required
+def view_announcement(announcement_id):
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        # Get the announcement and mark it as read
+        cur.execute('''
+            SELECT a.id, a.title, a.message, a.created_at, u.username as created_by
+            FROM announcements a
+            JOIN users u ON a.created_by = u.id
+            JOIN user_announcements ua ON a.id = ua.announcement_id
+            WHERE ua.user_id = %s AND a.id = %s
+        ''', (session['user_id'], announcement_id))
+        
+        announcement = cur.fetchone()
+        if not announcement:
+            flash('Announcement not found', 'danger')
+            return redirect(url_for('view_announcements'))
+            
+        # Mark as read
+        mark_announcement_read(announcement_id, session['user_id'])
+        
+        return render_template('announcements/view.html', announcement={
+            'id': announcement[0],
+            'title': announcement[1],
+            'message': announcement[2],
+            'created_at': announcement[3],
+            'created_by': announcement[4]
+        })
+    except Exception as e:
+        flash('Error viewing announcement', 'danger')
+        return redirect(url_for('view_announcements'))
+    finally:
+        cur.close()
+        conn.close()
+
+# Admin announcement management
+@app.route('/admin/announcements')
+@login_required
+@admin_required
+def manage_announcements():
+    announcements = get_all_announcements()
+    return render_template('admin/announcements/list.html', announcements=announcements)
+
+@app.route('/admin/announcements/add', methods=['GET', 'POST'])
+@login_required
+@admin_required
+def add_announcement():
+    if request.method == 'POST':
+        title = request.form.get('title', '').strip()
+        message = request.form.get('message', '').strip()
+        send_to = request.form.getlist('send_to')  # List of user IDs or 'all'
+        
+        if not title or not message:
+            flash('Title and message are required', 'danger')
+            return redirect(url_for('add_announcement'))
+            
+        try:
+            # If "all" is selected, send to all students
+            user_ids = None if 'all' in send_to else [int(user_id) for user_id in send_to]
+            
+            create_announcement(
+                title=title,
+                message=message,
+                created_by=session['user_id'],
+                user_ids=user_ids
+            )
+            
+            flash('Announcement created successfully!', 'success')
+            return redirect(url_for('manage_announcements'))
+        except Exception as e:
+            flash(f'Error creating announcement: {str(e)}', 'danger')
+            return redirect(url_for('add_announcement'))
+    
+    # GET request - show form
+    students = get_students()
+    return render_template('admin/announcements/add.html', students=students)
+
+
+@app.route('/admin/announcements/delete/<int:announcement_id>', methods=['POST'])
+@login_required
+@admin_required
+def delete_announcement(announcement_id):
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        cur.execute('DELETE FROM announcements WHERE id = %s', (announcement_id,))
+        conn.commit()
+        flash('Announcement deleted successfully', 'success')
+    except Exception as e:
+        conn.rollback()
+        flash('Error deleting announcement', 'danger')
+    finally:
+        cur.close()
+        conn.close()
+    return redirect(url_for('manage_announcements'))
+
+@app.route('/admin/assignments/import', methods=['GET', 'POST'])
+@login_required
+@admin_required
+def import_assignments():
+    if request.method == 'POST':
+        if 'json_file' not in request.files:
+            flash('No file selected', 'danger')
+            return redirect(request.url)
+        
+        file = request.files['json_file']
+        if file.filename == '':
+            flash('No file selected', 'danger')
+            return redirect(request.url)
+        
+        if file and file.filename.endswith('.json'):
+            try:
+                data = json.load(file)
+                
+                # Handle both single assignment and array of assignments
+                assignments_data = data if isinstance(data, list) else [data]
+                
+                for assignment_data in assignments_data:
+                    # Validate required fields
+                    required_fields = ['title', 'description', 'subject', 'total_marks', 'deadline']
+                    if not all(field in assignment_data for field in required_fields):
+                        flash('Invalid JSON structure - missing required fields', 'danger')
+                        continue
+                    
+                    try:
+                        # Convert deadline string to datetime
+                        deadline = datetime.strptime(assignment_data['deadline'], '%Y-%m-%d %H:%M')
+                    except ValueError:
+                        flash('Invalid deadline format in JSON (use YYYY-MM-DD HH:MM)', 'danger')
+                        continue
+                    
+                    # Get assigned users (default to all students if not specified)
+                    assigned_users = assignment_data.get('assigned_users', 'all')
+                    
+                    # Get the interactive content if provided
+                    content = assignment_data.get('content', '')
+                    
+                    # Create assignment with the interactive content
+                    assignment_id = add_assignment(
+                        title=assignment_data['title'],
+                        description=assignment_data['description'],
+                        subject=assignment_data['subject'],
+                        total_marks=int(assignment_data['total_marks']),
+                        deadline=deadline,
+                        assigned_students_ids=assigned_users if assigned_users != 'all' else None
+                    )
+                    
+                    # If there's interactive content, store it in the database
+                    if content:
+                        conn = get_db_connection()
+                        cur = conn.cursor()
+                        try:
+                            cur.execute('''
+                                UPDATE assignments 
+                                SET content = %s 
+                                WHERE id = %s
+                            ''', (content, assignment_id))
+                            conn.commit()
+                        except Exception as e:
+                            conn.rollback()
+                            print(f"Error saving interactive content: {e}")
+                        finally:
+                            cur.close()
+                            conn.close()
+                
+                flash(f'Successfully imported {len(assignments_data)} assignments', 'success')
+                return redirect(url_for('manage_assignments'))
+                
+            except json.JSONDecodeError:
+                flash('Invalid JSON file', 'danger')
+            except Exception as e:
+                flash(f'Error importing assignments: {str(e)}', 'danger')
+        
+        else:
+            flash('Only JSON files are allowed', 'danger')
+    
+    # GET request - show import form
+    return render_template('admin/assignments/import.html')
+
+@app.route('/whiteboards')
+@login_required
+def list_whiteboards():
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        # Get whiteboards the user has access to
+        cur.execute('''
+            SELECT w.id, w.name, u.username as created_by, w.created_at
+            FROM whiteboards w
+            JOIN users u ON w.created_by = u.id
+            JOIN whiteboard_participants p ON w.id = p.whiteboard_id
+            WHERE p.user_id = %s
+            ORDER BY w.created_at DESC
+        ''', (session['user_id'],))
+        
+        whiteboards = [{
+            'id': row[0],
+            'name': row[1],
+            'created_by': row[2],
+            'created_at': row[3]
+        } for row in cur.fetchall()]
+        
+        return render_template('whiteboards/list.html', whiteboards=whiteboards)
+    except Exception as e:
+        print(f"Error listing whiteboards: {e}")
+        return render_template('whiteboards/list.html', whiteboards=[])
+    finally:
+        cur.close()
+        conn.close()
+
+@app.route('/whiteboards/create', methods=['GET', 'POST'])
+@login_required
+def create_whiteboard_route():
+    form = CreateWhiteboardForm()
+    
+    if form.validate_on_submit():
+        name = form.name.data.strip()
+        whiteboard_id = create_whiteboard(name, session['user_id'])
+        if whiteboard_id:
+            flash('Whiteboard created successfully!', 'success')
+            return redirect(url_for('view_whiteboard', whiteboard_id=whiteboard_id))
+        else:
+            flash('Error creating whiteboard', 'danger')
+    
+    return render_template('whiteboards/create.html', form=form)
+
+@app.route('/whiteboards/<uuid:whiteboard_id>')
+@login_required
+def view_whiteboard(whiteboard_id):
+    whiteboard_id = str(whiteboard_id)
+    
+    # Check if user has access
+    conn = get_db_connection()
+    cur = conn.cursor()
+    try:
+        cur.execute('''
+            SELECT 1 FROM whiteboard_participants
+            WHERE whiteboard_id = %s AND user_id = %s
+        ''', (whiteboard_id, session['user_id']))
+        
+        if not cur.fetchone():
+            flash('You do not have access to this whiteboard', 'danger')
+            return redirect(url_for('list_whiteboards'))
+            
+        whiteboard = get_whiteboard(whiteboard_id)
+        if not whiteboard:
+            flash('Whiteboard not found', 'danger')
+            return redirect(url_for('list_whiteboards'))
+            
+        return render_template('whiteboards/view.html', 
+                            whiteboard=whiteboard,
+                            user_id=session['user_id'])
+    finally:
+        cur.close()
+        conn.close()
+
+@app.template_filter('datetime')
+def format_datetime(value, format="%Y-%m-%d %H:%M:%S"):
+    """Format a datetime object to a string."""
+    if value is None:
+        return ""
+    return value.strftime(format)
+
+
+@app.context_processor
+def inject_functions():
+    return dict(get_unread_announcements_count=get_unread_announcements_count)
+    
+    
+# if __name__ == '__main__':
+#     from waitress import serve
 if __name__ == '__main__':
-    from waitress import serve
+    # Enable Flask debug features
+    app.debug = True  # Enables auto-reloader and debugger
+    
+    # Initialize database
     initialize_database()
-    serve(app, host="0.0.0.0", port=5000)
-
-# if __name__ == '__main__':
-#     # Enable Flask debug features
-#     app.debug = True  # Enables auto-reloader and debugger
     
-#     # Initialize database
-#     initialize_database()
+    # Run the development server with SocketIO
+    socketio.run(app, host='0.0.0.0', port=5000)
     
-#     # Run the development server
-#     app.run(host='0.0.0.0', port=5000)
+    # Run the development server
+    app.run(host='0.0.0.0', port=5000)
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Flask==2.3.2\r\npsycopg2-binary==2.9.6\r\ngunicorn==20.1.0\r\npython-dotenv==1.0.0\r\nflask\r\nflask_login
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
--- a/requirements.txt	(revision 1cab9e7543075d28d013d0617734caf5ff48a8ba)
+++ b/requirements.txt	(date 1747946342868)
@@ -1,6 +1,117 @@
-Flask==2.3.2
-psycopg2-binary==2.9.6
-gunicorn==20.1.0
-python-dotenv==1.0.0
-flask
-flask_login
\ No newline at end of file
+anyio==4.9.0
+argon2-cffi==23.1.0
+argon2-cffi-bindings==21.2.0
+arrow==1.3.0
+asttokens==3.0.0
+async-lru==2.0.5
+attrs==25.3.0
+babel==2.17.0
+beautifulsoup4==4.13.4
+bidict==0.23.1
+bleach==6.2.0
+blinker==1.9.0
+certifi==2025.4.26
+cffi==1.17.1
+charset-normalizer==3.4.2
+click==8.1.8
+colorama==0.4.6
+comm==0.2.2
+debugpy==1.8.14
+decorator==5.2.1
+defusedxml==0.7.1
+docker==7.1.0
+ecdsa==0.19.1
+executing==2.2.0
+fastjsonschema==2.21.1
+Flask==3.1.0
+flask-cors==6.0.0
+Flask-Login==0.6.3
+Flask-SocketIO==5.5.1
+Flask-SQLAlchemy==3.1.1
+fqdn==1.5.1
+greenlet==3.2.1
+h11==0.16.0
+httpcore==1.0.9
+httpx==0.28.1
+idna==3.10
+ipykernel==6.29.5
+ipython==9.2.0
+ipython_pygments_lexers==1.1.1
+isoduration==20.11.0
+itsdangerous==2.2.0
+jedi==0.19.2
+Jinja2==3.1.6
+json5==0.12.0
+jsonpointer==3.0.0
+jsonschema==4.23.0
+jsonschema-specifications==2025.4.1
+jupyter-events==0.12.0
+jupyter-kernel-gateway==3.0.1
+jupyter-lsp==2.2.5
+jupyter_client==8.6.3
+jupyter_core==5.7.2
+jupyter_server==2.16.0
+jupyter_server_terminals==0.5.3
+jupyterlab==4.4.2
+jupyterlab_pygments==0.3.0
+jupyterlab_server==2.27.3
+MarkupSafe==3.0.2
+matplotlib-inline==0.1.7
+mistune==3.1.3
+nbclient==0.10.2
+nbconvert==7.16.6
+nbformat==5.10.4
+nest-asyncio==1.6.0
+notebook==7.4.2
+notebook_shim==0.2.4
+overrides==7.7.0
+packaging==25.0
+pandocfilters==1.5.1
+parso==0.8.4
+platformdirs==4.3.8
+prometheus_client==0.22.0
+prompt_toolkit==3.0.51
+psutil==7.0.0
+psycopg2-binary==2.9.10
+pure_eval==0.2.3
+pycparser==2.22
+Pygments==2.19.1
+python-dateutil==2.9.0.post0
+python-dotenv==1.1.0
+python-engineio==4.12.1
+python-http-client==3.3.7
+python-json-logger==3.3.0
+python-socketio==5.13.0
+pywin32==310
+pywinpty==2.0.15
+PyYAML==6.0.2
+pyzmq==26.4.0
+referencing==0.36.2
+requests==2.32.3
+rfc3339-validator==0.1.4
+rfc3986-validator==0.1.1
+rpds-py==0.25.0
+Send2Trash==1.8.3
+sendgrid==6.12.2
+setuptools==80.8.0
+simple-websocket==1.1.0
+six==1.17.0
+sniffio==1.3.1
+soupsieve==2.7
+SQLAlchemy==2.0.40
+stack-data==0.6.3
+terminado==0.18.1
+tinycss2==1.4.0
+tornado==6.5
+traitlets==5.14.3
+types-python-dateutil==2.9.0.20250516
+typing_extensions==4.13.2
+uri-template==1.3.0
+urllib3==2.4.0
+waitress==3.0.2
+wcwidth==0.2.13
+webcolors==24.11.1
+webencodings==0.5.1
+websocket-client==1.8.0
+Werkzeug==3.1.3
+wsproto==1.2.0
\ No newline at end of file
Index: templates/base.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>MiltonTutor+ {% block title %}{% endblock %}</title>\r\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/style.css') }}\">\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\" rel=\"stylesheet\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"\r\n        integrity=\"sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==\"\r\n        crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\r\n</head>\r\n\r\n<body class=\"d-flex flex-column min-vh-100\">\r\n    <div class=\"wrapper\">\r\n        <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div class=\"container\">\r\n                <a class=\"navbar-brand d-flex align-items-center\" href=\"{{ url_for('home') }}\">\r\n                    <i class=\"bi bi-mortarboard-fill navbar-brand-icon text-white mx-2\"\r\n                        style=\"font-size: 24px;\"></i><span class=\"text-warning\">MiltonTutor</span><span\r\n                        class=\"fw-bolder text-white\">&plus;</span></a>\r\n                <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\">\r\n                    <span class=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                    <ul class=\"navbar-nav me-auto\">\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\" href=\"{{ url_for('home') }}\">Home</a>\r\n                        </li>\r\n                        {% if 'username' in session and session.role == 'student' %}\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\" href=\"{{ url_for('view_sessions') }}\">Book A Class</a>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\" href=\"{{ url_for('view_assignments') }}\">\r\n                                <i class=\"bi bi-journal-text me-1\"></i> Assignments\r\n                            </a>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\" href=\"{{ url_for('view_submissions') }}\">\r\n                                <i class=\"bi bi-list-check me-1\"></i> My Work\r\n                            </a>\r\n                        </li>\r\n                        {% endif %}\r\n                        {% if 'username' in session %}\r\n                        <li class=\"nav-item dropdown\">\r\n                            <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"tutorialsDropdown\" role=\"button\"\r\n                                data-bs-toggle=\"dropdown\">\r\n                                <i class=\"bi bi-collection-play me-1\"></i> Tutorials\r\n                            </a>\r\n                            <ul class=\"dropdown-menu\">\r\n                                {% if categories %}\r\n                                {% for category in categories %}\r\n                                <li><a class=\"dropdown-item\"\r\n                                        href=\"{{ url_for('tutorial_language', category_id=category[0]) }}\">{{\r\n                                        category[1] }}</a></li>\r\n                                {% endfor %}\r\n                                {% else %}\r\n                                <li><span class=\"dropdown-item text-muted\">No tutorials available</span></li>\r\n                                {% endif %}\r\n                            </ul>\r\n                        </li>\r\n                        {% endif %}\r\n                    </ul>\r\n                    <ul class=\"navbar-nav\">\r\n                        {% if 'username' in session and session['role'] == 'admin' %}\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link btn btn-outline-warning btn-sm mx-2\"\r\n                                href=\"{{ url_for('admin_dashboard') }}\">\r\n                                <i class=\"bi bi-speedometer2 me-1\"></i> Admin Panel\r\n                            </a>\r\n                        </li>\r\n                        {% endif %}\r\n                        {% if 'username' in session %}\r\n                        <li class=\"nav-item dropdown\">\r\n                            <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"userDropdown\" role=\"button\"\r\n                                data-bs-toggle=\"dropdown\">\r\n                                <i class=\"bi bi-person-circle me-1\"></i> {{ session['username'] }}\r\n                            </a>\r\n                            <ul class=\"dropdown-menu dropdown-menu-end\">\r\n                                <li><a class=\"dropdown-item\" href=\"#\"><i class=\"bi bi-person me-2\"></i> Profile</a></li>\r\n                                <li>\r\n                                    <hr class=\"dropdown-divider\">\r\n                                </li>\r\n                                <li><a class=\"dropdown-item\" href=\"{{ url_for('logout') }}\"><i\r\n                                            class=\"bi bi-box-arrow-right me-2\"></i> Logout</a></li>\r\n                            </ul>\r\n                        </li>\r\n                        {% else %}\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\" href=\"{{ url_for('login') }}\">Login</a>\r\n                        </li>\r\n                        {% endif %}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n\r\n        <div class=\"container flex-grow-1 m-auto\">\r\n            {% with messages = get_flashed_messages(with_categories=true) %}\r\n            {% if messages %}\r\n            {% for category, message in messages %}\r\n            <div class=\"alert alert-{{ category }} alert-dismissible fade show\">\r\n                {{ message }}\r\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\r\n            </div>\r\n            {% endfor %}\r\n            {% endif %}\r\n            {% endwith %}\r\n\r\n            {% block content %}{% endblock %}\r\n        </div>\r\n\r\n        <!-- <footer class=\"bg-dark text-white mt-5 py-2\">\r\n            <div class=\"container text-center\">\r\n                <p class=\"fs-6\">&copy; 2025 MiltonTutor+. All rights reserved.</p>\r\n            </div>\r\n        </footer> -->\r\n        <!-- Footer -->\r\n        <footer class=\"bg-dark text-white mt-5 py-2\">\r\n            <div class=\"container py-4\">\r\n                <div class=\"row g-4\">\r\n                    <div class=\"col-lg-3\">\r\n                        <h3 class=\"h5 text-white mb-4\">MiltonTutor +</h3>\r\n                        <p class=\"text-white-50\">Helping students succeed since 2015 with premium exam preparation\r\n                            materials.</p>\r\n                    </div>\r\n\r\n                    <div class=\"col-6 col-lg-2\">\r\n                        <h3 class=\"h5 text-white mb-4\">Resources</h3>\r\n                        <ul class=\"list-unstyled\">\r\n                            <li class=\"mb-2\"><a href=\"#\" class=\"text-white-50\">Study Guides</a></li>\r\n                            <li class=\"mb-2\"><a href=\"#\" class=\"text-white-50\">Video Library</a></li>\r\n                            <li class=\"mb-2\"><a href=\"#\" class=\"text-white-50\">Practice Tests</a></li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div class=\"col-6 col-lg-2\">\r\n                        <h3 class=\"h5 text-white mb-4\">Company</h3>\r\n                        <ul class=\"list-unstyled\">\r\n                            <li class=\"mb-2\"><a href=\"#\" class=\"text-white-50\">About Us</a></li>\r\n                            <li class=\"mb-2\"><a href=\"#\" class=\"text-white-50\">Our Educators</a></li>\r\n                            <li class=\"mb-2\"><a href=\"#\" class=\"text-white-50\">Careers</a></li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div class=\"col-lg-3\">\r\n                        <h3 class=\"h5 text-white mb-4\">Contact</h3>\r\n                        <p class=\"text-white-50\">support@studymasterpro.com</p>\r\n                        <p class=\"text-white-50\">1-800-555-EDUC</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <hr class=\"my-4 bg-secondary\">\r\n\r\n                <div class=\"d-flex flex-column flex-md-row justify-content-between align-items-center\">\r\n                    <p class=\"small text-white-50 mb-2 mb-md-0\">&copy; 2025 MiltonTutor+. All rights reserved.</p>\r\n                    <div class=\"d-flex\">\r\n                        <a href=\"#\" class=\"text-white-50 small me-3\">Terms</a>\r\n                        <a href=\"#\" class=\"text-white-50 small me-3\">Privacy</a>\r\n                        <a href=\"#\" class=\"text-white-50 small\">Cookies</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </footer>\r\n    </div>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js\"></script>\r\n    {% block scripts %}{% endblock %}\r\n</body>\r\n\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/base.html b/templates/base.html
--- a/templates/base.html	(revision 1cab9e7543075d28d013d0617734caf5ff48a8ba)
+++ b/templates/base.html	(date 1747946345940)
@@ -1,173 +1,336 @@
 <!DOCTYPE html>
 <html lang="en">
-
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+  <head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     <title>MiltonTutor+ {% block title %}{% endblock %}</title>
-    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
-    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css" rel="stylesheet">
-    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
-    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
-        integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
-        crossorigin="anonymous" referrerpolicy="no-referrer" />
-</head>
+    <link
+      rel="stylesheet"
+      href="{{ url_for('static', filename='css/style.css') }}"
+    />
+    <link
+      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css"
+      rel="stylesheet"
+    />
+    <link
+      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
+      rel="stylesheet"
+    />
+    <link
+      rel="stylesheet"
+      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
+      integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
+      crossorigin="anonymous"
+      referrerpolicy="no-referrer"
+    />
+    <!-- Add these to your base template if not already present -->
+    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
+    <script src="https://cdn.jsdelivr.net/npm/fabric@5.2.4/dist/fabric.min.js"></script>
+    <script
+      id="MathJax-script"
+      async
+      src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
+    ></script>
+    <link rel="stylesheet" href="../static/css/video-tutorial.css" />
+    <script src="../static/js/grade8/partsOfSpeech.js" defer></script>
+    <script src="../static/js/grade7/fractions.js" defer></script>
+    <script src="../static/js/grade8/algebraicExpressions.js" defer></script>
+    <script src="../static/js/grade10/rational.js" defer></script>
+    <script src="../static/js/video_tutorials.js" defer></script>
+    <script src="../static/js/studyGuide.js" defer></script>
+    <script src="../static/js/study_guides_interactive.js" defer></script>
+  </head>
 
-<body class="d-flex flex-column min-vh-100">
+  <body class="d-flex flex-column min-vh-100">
     <div class="wrapper">
-        <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
-            <div class="container">
-                <a class="navbar-brand d-flex align-items-center" href="{{ url_for('home') }}">
-                    <i class="bi bi-mortarboard-fill navbar-brand-icon text-white mx-2"
-                        style="font-size: 24px;"></i><span class="text-warning">MiltonTutor</span><span
-                        class="fw-bolder text-white">&plus;</span></a>
-                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
-                    <span class="navbar-toggler-icon"></span>
-                </button>
-                <div class="collapse navbar-collapse" id="navbarNav">
-                    <ul class="navbar-nav me-auto">
-                        <li class="nav-item">
-                            <a class="nav-link" href="{{ url_for('home') }}">Home</a>
-                        </li>
-                        {% if 'username' in session and session.role == 'student' %}
-                        <li class="nav-item">
-                            <a class="nav-link" href="{{ url_for('view_sessions') }}">Book A Class</a>
-                        </li>
-                        <li class="nav-item">
-                            <a class="nav-link" href="{{ url_for('view_assignments') }}">
-                                <i class="bi bi-journal-text me-1"></i> Assignments
-                            </a>
-                        </li>
-                        <li class="nav-item">
-                            <a class="nav-link" href="{{ url_for('view_submissions') }}">
-                                <i class="bi bi-list-check me-1"></i> My Work
-                            </a>
-                        </li>
-                        {% endif %}
-                        {% if 'username' in session %}
-                        <li class="nav-item dropdown">
-                            <a class="nav-link dropdown-toggle" href="#" id="tutorialsDropdown" role="button"
-                                data-bs-toggle="dropdown">
-                                <i class="bi bi-collection-play me-1"></i> Tutorials
-                            </a>
-                            <ul class="dropdown-menu">
-                                {% if categories %}
-                                {% for category in categories %}
-                                <li><a class="dropdown-item"
-                                        href="{{ url_for('tutorial_language', category_id=category[0]) }}">{{
-                                        category[1] }}</a></li>
-                                {% endfor %}
-                                {% else %}
-                                <li><span class="dropdown-item text-muted">No tutorials available</span></li>
-                                {% endif %}
-                            </ul>
-                        </li>
-                        {% endif %}
-                    </ul>
-                    <ul class="navbar-nav">
-                        {% if 'username' in session and session['role'] == 'admin' %}
-                        <li class="nav-item">
-                            <a class="nav-link btn btn-outline-warning btn-sm mx-2"
-                                href="{{ url_for('admin_dashboard') }}">
-                                <i class="bi bi-speedometer2 me-1"></i> Admin Panel
-                            </a>
-                        </li>
-                        {% endif %}
-                        {% if 'username' in session %}
-                        <li class="nav-item dropdown">
-                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button"
-                                data-bs-toggle="dropdown">
-                                <i class="bi bi-person-circle me-1"></i> {{ session['username'] }}
-                            </a>
-                            <ul class="dropdown-menu dropdown-menu-end">
-                                <li><a class="dropdown-item" href="#"><i class="bi bi-person me-2"></i> Profile</a></li>
-                                <li>
-                                    <hr class="dropdown-divider">
-                                </li>
-                                <li><a class="dropdown-item" href="{{ url_for('logout') }}"><i
-                                            class="bi bi-box-arrow-right me-2"></i> Logout</a></li>
-                            </ul>
-                        </li>
-                        {% else %}
-                        <li class="nav-item">
-                            <a class="nav-link" href="{{ url_for('login') }}">Login</a>
-                        </li>
-                        {% endif %}
-                    </ul>
-                </div>
-            </div>
-        </nav>
+      <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
+        <div class="container">
+          <a
+            class="navbar-brand d-flex align-items-center"
+            href="{{ url_for('home') }}"
+          >
+            <i
+              class="bi bi-mortarboard-fill navbar-brand-icon text-white mx-2"
+              style="font-size: 24px"
+            ></i
+            ><span class="text-warning">MiltonTutor</span
+            ><span class="fw-bolder text-white">&plus;</span></a
+          >
+          <button
+            class="navbar-toggler position-relative"
+            type="button"
+            data-bs-toggle="collapse"
+            data-bs-target="#navbarNav"
+          >
+            <span class="navbar-toggler-icon"></span>
+            <!-- Mobile badge (shown only when menu is closed) -->
+            {% if 'user_id' in session %} {% set unread_count =
+            get_unread_announcements_count(session['user_id']) %}
+            <span
+              id="mobileNotificationBadge"
+              class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-lg-none"
+              style="display: none"
+            >
+              {{ unread_count }}
+            </span>
+            {% endif %}
+          </button>
+          <div class="collapse navbar-collapse" id="navbarNav">
+            <ul class="navbar-nav me-auto">
+              <li class="nav-item" style="font-size: 0.9rem">
+                <a class="nav-link" href="{{ url_for('home') }}">
+                  <i class="bi bi-house-door-fill me-1"></i>
+                  <span>Home</span></a
+                >
+              </li>
+              {% if 'username' in session and session.role == 'student' %}
+              <li class="nav-item" style="font-size: 0.9rem">
+                <a class="nav-link" href="{{ url_for('view_sessions') }}">
+                  <i class="bi bi-calendar-event me-1"></i>
+                  <span>Book A Class</span></a
+                >
+              </li>
+              <li class="nav-item" style="font-size: 0.9rem">
+                <a class="nav-link" href="{{ url_for('view_assignments') }}">
+                  <i class="bi bi-journal-text me-1"></i>
+                  <span>Assignments</span>
+                </a>
+              </li>
+              <li class="nav-item" style="font-size: 0.9rem">
+                <a class="nav-link" href="{{ url_for('view_submissions') }}">
+                  <i class="bi bi-list-check me-1"></i>
+                  <span>My Work</span>
+                </a>
+              </li>
+              <li class="nav-item" style="font-size: 0.9rem">
+                <a class="nav-link" href="{{ url_for('tutorials_home') }}">
+                  <i class="bi bi-collection-play me-1"></i>
+                  <span>Tutorials</span>
+                </a>
+              </li>
+              <li class="nav-item" style="font-size: 0.9rem">
+                <a class="nav-link" href="{{ url_for('studyguides_home') }}">
+                  <i class="bi bi-book me-1"></i> <span>Practice</span>
+                </a>
+              </li>
+              {# Add the Exam Practice link here #}
+              <li class="nav-item" style="font-size: 0.9rem">
+                <a class="nav-link" href="{{ url_for('exam_practice') }}">
+                  <i class="bi bi-pencil-square me-1"></i>
+                  <span>Exams</span>
+                </a>
+              </li>
+              <li class="nav-item" style="font-size: 0.9rem">
+                <a class="nav-link" href="{{ url_for('list_whiteboards') }}">
+                  <i class="bi bi-easel me-1"></i>
+                  <span>Whiteboard</span>
+                </a>
+              </li>
+              <li class="nav-item" style="font-size: 0.9rem">
+                <a class="nav-link" href="{{ url_for('view_leaderboard') }}">
+                  <i class="bi bi-trophy-fill"></i>
+                  <span>Leaderboard</span>
+                </a>
+              </li>
+              {% if 'user_id' in session %}
+              <!-- Later in your navbar items -->
+              <li class="nav-item" style="font-size: 0.9rem">
+                <a class="nav-link" href="{{ url_for('view_announcements') }}">
+                  <i class="bi bi-megaphone"></i>
+                  <span>Announcements</span>
+                  <!-- Desktop badge (always shown) -->
+                  {% if 'user_id' in session %} {% set unread_count =
+                  get_unread_announcements_count(session['user_id']) %} {% if
+                  unread_count > 0 %}
+                  <span
+                    id="desktopNotificationBadge"
+                    class="badge bg-danger d-none d-lg-inline-block"
+                    >{{ unread_count }}</span
+                  >
+                  {% endif %} {% endif %}
+                  <!-- Mobile badge (shown only when menu is open) -->
+                  <span
+                    id="mobileMenuOpenBadge"
+                    class="badge bg-danger d-lg-none"
+                    style="display: none"
+                    >{{ unread_count }}</span
+                  >
+                </a>
+              </li>
+              {% endif %} {% endif %} {% if 'username' in session %} {% endif %}
+            </ul>
+            <ul class="navbar-nav">
+              {% if 'username' in session and session['role'] == 'admin' %}
+              <li class="nav-item">
+                <a
+                  class="nav-link btn btn-outline-warning btn-sm mx-2"
+                  href="{{ url_for('admin_dashboard') }}"
+                >
+                  <i class="bi bi-speedometer2 me-1"></i> Admin Panel
+                </a>
+              </li>
+              {% endif %} {% if 'username' in session %}
+              <li class="nav-item dropdown">
+                <a
+                  class="nav-link dropdown-toggle"
+                  href="#"
+                  id="userDropdown"
+                  role="button"
+                  data-bs-toggle="dropdown"
+                >
+                  <i class="bi bi-person-circle me-1"></i> {{
+                  session['username'] }}
+                </a>
+                <ul
+                  class="dropdown-menu dropdown-menu-end"
+                  aria-labelledby="userDropdown"
+                >
+                  <li>
+                    <a class="dropdown-item" href="#"
+                      ><i class="bi bi-person me-2"></i> Profile</a
+                    >
+                  </li>
+                  {# Add this link for students #} {% if session.get('role') ==
+                  'student' %}
+                  <li>
+                    <a
+                      class="dropdown-item"
+                      href="{{ url_for('subscription_status') }}"
+                    >
+                      <i class="bi bi-credit-card me-2"></i> Subscription Status
+                    </a>
+                  </li>
+                  {% endif %}
+                  <li>
+                    <hr class="dropdown-divider" />
+                  </li>
+                  <li>
+                    <a class="dropdown-item" href="{{ url_for('logout') }}"
+                      ><i class="bi bi-box-arrow-right me-2"></i> Logout</a
+                    >
+                  </li>
+                </ul>
+              </li>
+              {% else %}
+              <li class="nav-item">
+                <a class="nav-link" href="{{ url_for('login') }}">Login</a>
+              </li>
+              {% endif %}
+            </ul>
+          </div>
+        </div>
+      </nav>
 
-        <div class="container flex-grow-1 m-auto">
-            {% with messages = get_flashed_messages(with_categories=true) %}
-            {% if messages %}
-            {% for category, message in messages %}
-            <div class="alert alert-{{ category }} alert-dismissible fade show">
-                {{ message }}
-                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
-            </div>
-            {% endfor %}
-            {% endif %}
-            {% endwith %}
-
-            {% block content %}{% endblock %}
-        </div>
+      <div class="container flex-grow-1 m-auto" style="padding: 0">
+        {% with messages = get_flashed_messages(with_categories=true) %} {% if
+        messages %} {% for category, message in messages %}
+        <div class="alert alert-{{ category }} alert-dismissible fade show">
+          {{ message }}
+          <button
+            type="button"
+            class="btn-close"
+            data-bs-dismiss="alert"
+          ></button>
+        </div>
+        {% endfor %} {% endif %} {% endwith %} {% block content %}{% endblock %}
+      </div>
 
-        <!-- <footer class="bg-dark text-white mt-5 py-2">
-            <div class="container text-center">
-                <p class="fs-6">&copy; 2025 MiltonTutor+. All rights reserved.</p>
-            </div>
-        </footer> -->
-        <!-- Footer -->
-        <footer class="bg-dark text-white mt-5 py-2">
-            <div class="container py-4">
-                <div class="row g-4">
-                    <div class="col-lg-3">
-                        <h3 class="h5 text-white mb-4">MiltonTutor +</h3>
-                        <p class="text-white-50">Helping students succeed since 2015 with premium exam preparation
-                            materials.</p>
-                    </div>
+      <footer class="bg-dark text-white mt-5 py-2">
+        <div class="container py-4">
+          <div class="row g-4">
+            <div class="col-lg-3">
+              <h3 class="h5 text-white mb-4">MiltonTutor +</h3>
+              <p class="text-white-50">
+                Helping students succeed since 2015 with premium exam
+                preparation materials.
+              </p>
+            </div>
 
-                    <div class="col-6 col-lg-2">
-                        <h3 class="h5 text-white mb-4">Resources</h3>
-                        <ul class="list-unstyled">
-                            <li class="mb-2"><a href="#" class="text-white-50">Study Guides</a></li>
-                            <li class="mb-2"><a href="#" class="text-white-50">Video Library</a></li>
-                            <li class="mb-2"><a href="#" class="text-white-50">Practice Tests</a></li>
-                        </ul>
-                    </div>
+            <div class="col-6 col-lg-2">
+              <h3 class="h5 text-white mb-4">Resources</h3>
+              <ul class="list-unstyled">
+                <li class="mb-2">
+                  <a href="#" class="text-white-50">Study Guides</a>
+                </li>
+                <li class="mb-2">
+                  <a href="#" class="text-white-50">Video Library</a>
+                </li>
+                <li class="mb-2">
+                  <a href="#" class="text-white-50">Practice Tests</a>
+                </li>
+              </ul>
+            </div>
 
-                    <div class="col-6 col-lg-2">
-                        <h3 class="h5 text-white mb-4">Company</h3>
-                        <ul class="list-unstyled">
-                            <li class="mb-2"><a href="#" class="text-white-50">About Us</a></li>
-                            <li class="mb-2"><a href="#" class="text-white-50">Our Educators</a></li>
-                            <li class="mb-2"><a href="#" class="text-white-50">Careers</a></li>
-                        </ul>
-                    </div>
+            <div class="col-6 col-lg-2">
+              <h3 class="h5 text-white mb-4">Company</h3>
+              <ul class="list-unstyled">
+                <li class="mb-2">
+                  <a href="#" class="text-white-50">About Us</a>
+                </li>
+                <li class="mb-2">
+                  <a href="#" class="text-white-50">Our Educators</a>
+                </li>
+                <li class="mb-2">
+                  <a href="#" class="text-white-50">Careers</a>
+                </li>
+              </ul>
+            </div>
 
-                    <div class="col-lg-3">
-                        <h3 class="h5 text-white mb-4">Contact</h3>
-                        <p class="text-white-50">support@studymasterpro.com</p>
-                        <p class="text-white-50">1-800-555-EDUC</p>
-                    </div>
-                </div>
+            <div class="col-lg-3">
+              <h3 class="h5 text-white mb-4">Contact</h3>
+              <p class="text-white-50">support@studymasterpro.com</p>
+              <p class="text-white-50">1-800-555-EDUC</p>
+            </div>
+          </div>
 
-                <hr class="my-4 bg-secondary">
+          <hr class="my-4 bg-secondary" />
 
-                <div class="d-flex flex-column flex-md-row justify-content-between align-items-center">
-                    <p class="small text-white-50 mb-2 mb-md-0">&copy; 2025 MiltonTutor+. All rights reserved.</p>
-                    <div class="d-flex">
-                        <a href="#" class="text-white-50 small me-3">Terms</a>
-                        <a href="#" class="text-white-50 small me-3">Privacy</a>
-                        <a href="#" class="text-white-50 small">Cookies</a>
-                    </div>
-                </div>
-            </div>
-        </footer>
+          <div
+            class="d-flex flex-column flex-md-row justify-content-between align-items-center"
+          >
+            <p class="small text-white-50 mb-2 mb-md-0">
+              &copy; 2025 MiltonTutor+. All rights reserved.
+            </p>
+            <div class="d-flex">
+              <a href="#" class="text-white-50 small me-3">Terms</a>
+              <a href="#" class="text-white-50 small me-3">Privacy</a>
+              <a href="#" class="text-white-50 small">Cookies</a>
+            </div>
+          </div>
+        </div>
+      </footer>
     </div>
-    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>
+    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
+
     {% block scripts %}{% endblock %}
-</body>
-
-</html>
\ No newline at end of file
+    <script>
+      document.addEventListener("DOMContentLoaded", function () {
+        const navbarCollapse = document.getElementById("navbarNav");
+        const mobileBadge = document.getElementById("mobileNotificationBadge");
+        const menuOpenBadge = document.getElementById("mobileMenuOpenBadge");
+
+        if (navbarCollapse && mobileBadge && menuOpenBadge) {
+          // Initialize based on current state
+          if (navbarCollapse.classList.contains("show")) {
+            menuOpenBadge.style.display = "inline-block";
+            mobileBadge.style.display = "none";
+          } else {
+            menuOpenBadge.style.display = "none";
+            mobileBadge.style.display = "inline-block";
+          }
+
+          // Handle collapse events
+          navbarCollapse.addEventListener("show.bs.collapse", function () {
+            menuOpenBadge.style.display = "inline-block";
+            mobileBadge.style.display = "none";
+          });
+
+          navbarCollapse.addEventListener("hide.bs.collapse", function () {
+            menuOpenBadge.style.display = "none";
+            mobileBadge.style.display = "inline-block";
+          });
+        }
+      });
+    </script>
+  </body>
+</html>
